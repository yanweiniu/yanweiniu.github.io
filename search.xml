<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Web Api Checklist]]></title>
    <url>%2F2018%2F12%2F07%2FWebApi%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[Web API Checklist URI 是否短小且容易输入 URI 是否能让人一眼看懂 URI 是否只有小写字母组成 URI 是否容易修改? URI 是否反映了服务器端的架构 URI 规则是否统一 有没有使用合适的 HTTP 方法 URI 里用到的单词所表示的意思是否和大部分 API 相同 URI 里用到的名词是否采用了复数形式 URI 里有没有空格符及需要编码的字符 URI 里的单词和单词之间有没有使用连接符（-） 分页的设计是否恰当 登录有没有使用 OAuth 2.0 响应数据格式有没有使用 JSON 作为默认格式 是否支持通过查询参数来指定数据格式 是否支持不必要的 JSONP 响应数据的内容能不能从客户端指定 响应数据中是否存在必要的封装 响应数据的结构有没有尽量做到扁平化 响应数据有没有用对象来描述，而不是用数组 响应数据的名称所选用的单词的意思是否和大部分 API 相同 响应数据的名称有没有用尽可能少的单词来描述 响应数据的名称由多个单词连接而成时，连接方法在整个 API 里是否一致 响应数据的名称有没有使用奇怪的缩写形式 响应数据的名称的单复数形式是否和数据内容相一致 出错时响应数据中是否包含有助于客户端剖析原因的信息 出错时有没有返回 HTML 数据 有没有返回合适的状态码 服务器端在维护时有没有返回 503 状态码 有没有返回合适的媒体类型 必要时能不能支持 CORS 有没有返回 Cache-Control、ETag、Last-Modified、Vary 等首部以便客户端采用合适的缓存策略 不想缓存的数据有没有添加 Cache-Control: no-cache 首部信息 有没有对 API 进行版本管理 API 版本的命名有没有遵循语义化版本控制规范 有没有在 URI 里嵌入主版本编号，并且能够让人一目了然 有没有考虑 API 终止提供时的相关事项 有没有在文档里明确注明 API 的最低提供期限 有没有使用 HTTPS 来提供 API 有没有认真执行 JSON 转义 能不能识别 X-Requested-With 首部，让浏览器无法通过 Script 元素读取 JSON 数据 通过浏览器访问的 API 有没有使用 XSRF token API 在接收参数时有没有仔细检查非法的参数（负数等） 有没有做到即使重复发送，数据也不会多次更新 有没有在响应小心里添加各种增强安全性的首部 有没有实施访问限速 对预想的用例来说限速的次数有没有设置得过少]]></content>
  </entry>
  <entry>
    <title><![CDATA[fabric学习思路]]></title>
    <url>%2F2018%2F11%2F18%2Ffabric%E5%AD%A6%E4%B9%A0%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[Hyperledger (或 Hyperledger项目)是一个旨在推动区块链跨行业应用的开源项目这里总结一下需要掌握的知识点： DockerDocker 是一个开源的应用容器引擎，基于 Go 语言并遵从Apache2.0协议开源。 Docker 可以让开发者将应用和依赖包打包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 App），更重要的是容器性能开销极低。 在学习HyperLedger Fabric的过程中，开发人员需要掌握Docker的基本操作命令，以便可以更快上手，这其中包括打包、拆包、tag、容器管理、镜像管理等。同时，也需要学习Docker Compose和YAML的编排方案，了解如何挂载文件路径、设置端口绑定、确定Network以及掌握环境变量的用法等。 GoGo是一种并发的、带垃圾回收的、快速编译的语言。它可以在一台计算机上用几秒钟的时间编译一个大型的Go程序，结合了解释型语言的游刃有余、动态类型语言的开发效率以及静态类型的安全性。 HyperLedger Fabric是一个基于Go开发的开源项目，学习Go不仅仅是为了更深入地阅读源码需求，也因为智能合约编写方案需要Go来实现。对于Go的学习，至少能够在参考API文档的情况下编写出一套符合需求的智能合约。然而，对于有一定面向对象基础的开发人员来说，这并不难。 gRPCgRPC 是一个高性能、通用的开源RPC框架，由 Google公司 主要面向移动应用开发并基于HTTP/2 协议标准而设计的，基于 ProtoBuf(Protocol Buffers) 序列化协议开发，且支持众多开发语言。 在学习HyperLedger Fabric的过程中，对gRPC的感知并不深，但SDK的相关项目都需要用到它。建议还是需要了解一下诸如此类的传输协议，与之类似的还有Thrift、Dubbo等。 CACA是PKI系统中通信双方信任的实体，被称为可信第三方（Trusted Third Party， TTP）。作为可信第三方的行为具有非否认性。 在HyperLedger Fabric体系中，CA被广泛运用于每一个具体的对象，如orderer、peer以及最小单位的user等。后端开发的工程师应该比较了解，在HyperLedger Fabric中CA被用于各种对象的登记、登出、注册、撤销等操作。 P2PPeer-to-Peer，对等网络，即对等计算机网络，是一种在对等者（Peer）之间分配任务和工作负载的分布式应用架构。 关于P2P的学习并非必须，但也算是入门区块链底层的必修课，对期望今后有机会进行底层开发的工程师来说，目前多少需要了解一些。 KafkaKafka是一个分布式消息系统，由LinkedIn使用Scala编写，用作LinkedIn的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。具有高水平扩展和高吞吐量。 在Fabric网络中，数据是由Peer节点提交到Orderer排序服务，而Orderer相对于Kafka来说相当于上游模块，且Orderer还兼具提供对数据进行排序及生成符合配置规范及要求的区块。当使用上游模块的数据计算、统计、分析时，可以使用Kafka这样的分布式消息系统来协助业务流程。 Kafka是一种共识模式，也就是平等信任（同步复制），所有的HyperLedger Fabric网络加盟方都是可信方，因为消息总是均匀地分布在各处。但具体生产使用的时候会依赖于背书来做到确权，相对而言，Kafka应该是一种启动Fabric网络的模式或类型。 ZookeeperZookeeper是一种在分布式系统中被广泛用于分布式状态管理、分布式协调管理、分布式配置管理和分布式锁服务的集群。 Kafka增加和减少服务器都会在Zookeeper节点上触发相应的事件，Kafka系统会捕获这些事件，进行新一轮的负载均衡，客户端也会捕获这些事件进行新一轮的处理。 SDK（Java/Node.js）HyperLedger Fabric最终需要落地于实际应用，相对于HyperLedger Fabric的应用层则会直接提供接口给其他各客户端并对区块链网络进行操作。目前，基于HyperLedger Fabric的SDK方案有很多，但相对较成熟的主要还是Java和Node.js的。所以，这两门语言应当是学习HyperLedger Fabric平台工程师的主力语言，建议熟练使用两者其中之一。 如果这两门语言都不是目前学习Hyperledger Fabric工程师的主力语言，可以考虑用其他被gRPC所支持的编程语言自行实现，或者使用Fabric-SDK-Container提供的解决方案。]]></content>
  </entry>
  <entry>
    <title><![CDATA[区块链行业和区块链]]></title>
    <url>%2F2018%2F10%2F20%2F%E5%8C%BA%E5%9D%97%E9%93%BE%E8%A1%8C%E4%B8%9A%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE%2F</url>
    <content type="text"><![CDATA[区块链行业： 技术：以比特币为主的币种，比如莱特币、点点币，本质上是在比特币的核心代码进行修改之后的产物。以以太坊和EOS为主的新的分支体系。 人：倡导“去中心化”的极客 （链圈）以赚钱为目的的投资人（币圈）资本+技术+市场土壤=区块链行业的繁荣 区块链： 区块链是一个分布式网络; 区块链可以帮助多个节点达成共识去记录和 Token 相关的事情; 区块链可以帮助所有人无门槛地构建属于自己的小经济系统。有人理解区块链是重塑价值传递及生产关系;有人理解是减少商业信任及交易成本; 有的理解是帮助所有人无门槛地构建属于自己的小经济系统; 区块链是一种去中心化的分布式账本数据库，没有中心，数据存储的每个节点都会同步复制整￼ 区块链的特性:不可篡改、匿名性、去中心化、开放性、共识机制; 区块链能解决什么问题:1)减少商业交易成本及信任成本(分布式账本数据库)2)防伪技术(不可篡改)3)强协助能力(共识机制)4）区块链的目标是什么:提高系统效率，减少信任成本。 综上以上分析，我理解的区块链:综合不可篡改、匿名性、去中心化、开放性、共识机制的数据库 ，解决金融、防伪、强协助问题，目标是提高系统效率，减少信任成本。 tokenToken 在国内有的翻译成“通证”，有的 翻译成“代币”，其实最简单的理解就是“虚拟资产凭证”，它可以是我们的股权，也可以是票据，也可 以是游戏积分，凡是需要资产记账的地方都可以用 Token 来做。]]></content>
      <tags>
        <tag>blockChain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SEO优化方案]]></title>
    <url>%2F2018%2F09%2F28%2FSEO%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[解决搜索指定权威网址,在header上添加谷歌标识符 在每个页面需要添加自己的特定meta description。在160-300个字 在页面上添加h1标签 a.将页面logo包裹在h1中 b.页面链接跳转可以用h2，注意不能改变之前字体的大小样式 检查页面图片上是否都添加了alt标注，最好是含有关键字的介绍，或是列表产品的名字 通过 https://validator.w3.org/ 检查网站的页面是否有错误，进行修改. 尽量将打包后的文件大小缩小到300，nuxt现在默认如果超出300k会有警告 添加sitemap.xml文件，按照https://www.gome.com.cn/sitemap.xml 。对于产品可以只生成产品列表页，生成sitemap.xml 将关于我们等footer标签上添加rel=”nofollow” 谷歌知识图谱 建立维基百科词条，用于知识卡片中的公司介绍内容；添加Schema.org相关的结构化数据，使网站的更多功能和可视元素直接显示在结果和知识图卡中。包含：网站logo，官网网址、位置、联系人信息 关键词和站内链接优化]]></content>
      <tags>
        <tag>Seo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sails总结]]></title>
    <url>%2F2018%2F07%2F07%2Fsails%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[指南文章和博文 开发文档简介Sails 主要是使用 Express 为核心，再整合其他常用的 Express Middleware 及的模组，以约定大于配置为发展导向，我们只要使用 Sails.js 框架，即可达到简单并快速的建构一个具有 MVC 稳定基础的网站架构，随之利用这个架构扩充它，便可以打照一个企业级的架构。 Sails1.0以上版本和以下版本差异较大，学习时网上资源多为低版本，建议多看官方API，虽然是英文的。 sails中controller默认不支持URL路由访问了，直接访问会出现404错误，需要在blueprints中开启action支持（action：true），除了默认路由，Sails也允许使用config/routes.js文件让你手动绑定路由到控制器的动作。 model.find() // 查询所有 目录结构 myApp api controllers(控制器相关，业务逻辑) models(模块开发) policies(用于路由过滤) responses(定制所需的响应:如404 res.notFound()) services(定制一些常用的工具类–全局的) assets(静态资源文件) images js styles templates avicon.ico config(整个项目的配置文件系统) env(配置不同环境的变量) *.js tasks viewscontrollers篇 它的责任是接收request 并回response 给client 端，常作为models 和views 的中间层。 惯例上，新增一个Controller 须使用驼峰命名，且第一个字母是大写。 module.exports={ hello: async(req,res)=&gt; { res.send(&apos;hello man!!!&apos;); } } 此时访问localhost:1337/user/hello,此时你会发现访问成功并返回数据hello man!!!; 在UserController下面我们定义了一个hello 的动作(action),那么sails会自动生成action routers(可以禁用该路由访问方式，详见下面的config篇)，生成规则：domain/:user(不需要加controller)/:actionName 注意：默认的action routers 只能是get请求方式，如果需要其他请求方式需要在配置文件中配置 渲染模板如何渲染页面，sails提供了自己渲染方式，新建sails项目默认使用ejs作为模板。当然sails支持常用的一些模板，如：ejs、jade、hbs、swig等(详见sails官网)。渲染方式： module.exports={ hello:function(req,res){ res.view({data:{name:&apos;test123&apos;}}) //该方式会默认去找views/user/hello.ejs文件 //res.view(&apos;hello&apos;,{data:{name:&apos;test123&apos;}}) //指定页面views/hello.ejs } } Service为什么要有Service因为Controller 负责所有流程的控制，所以我们希望Controller 一直保持在很简洁的状态，所以我们会尽量把复杂的计算逻辑及商业逻辑都搬到Service ，以利重复使用跟管理。 逻辑计算 getServiceFee : async(user, order) =&gt; { let isVip = UserService.isVip(user); if(order.paymentTotalAmount &gt; largeOrderAmount || isVip ){ return 0; // 免運 }else{ return 70; } }复杂对象生成 getNewUser : async(…略…) =&gt; { let newUser = { username: newUser.username, email: newUser.email, // (略…) password: newUser.password } return newUser; } 创建Service文件目录：/api/service module.exports = { isAdmin: function(user) { let isAdmin = false; if (user) { user.Roles.forEach((role) =&gt; { if(role.authority == ‘admin’) isAdmin = true; }); } return isAdmin; } }Service 如何使用为了方便使用Sails.js 框架上的models，service 会自动定义为全域变量(/config/globals.js)。 // api/controllers/AdminController module.exports = { isSuperPermission: function (req, res) { const loginUser = AuthService.getLoginUser(req); const isAdmin = AuthService.isAdmin(loginUser); res.ok({isAdmin: isAdmin}); } } policies定义权限检查策略 module.exports = function(req, res, next) { // 檢查使用者是否已經登入，若登入則執行下一個處理程序。 if (req.session.authenticated) { return next(); } // 若使用者沒有登入，則回傳 403。 return res.forbidden(&apos;You are not permitted to perform this action.&apos;); }; model篇model,即数据模型，定义数据结构，一般定义好后需要定义相应的controller，定义如下： module.exports={ attributes:{ username:{ type:&apos;string&apos;, required:true }, password:{ type:&apos;string&apos;, required:true } } } attributes定义模型的属性：属性类型string、text、integer、float、date、datetime、boolean、binary、array、json、emailcollection:关联其他model数组model：关联其他model如下定义特殊的属性 attributes:{ uuid:{ type:’string’, size: 24 //定义属性的大小，必须保证适配器支持，如mysql primaryKey: true, //设置主键，每个模型只有一个主键，尽量在autoPK设置为false才使用 required:true }, state:{ type:’string’, enum: [‘pending’, ‘approved’, ‘denied’] /保证该属性的值必须为该数组中的值 required:true }, username:{ type:&apos;string&apos;, required:true, columnName: &apos;full_name&apos; //当我们需要兼容其他表的结构，而又需要自己设计合理的字段的时候 //可以使用该属性指定表中的字段名，而在sails中还是使用username字段 }, password:{ type:&apos;string&apos;, defaultsTo: &apos;123456&apos; //没有初始化的默认值 minLength: 6, //设置值最小长度 required:true //是不是必须的 }, count:{ type:&apos;integer&apos;, autoIncrement: true//当我们没有指定值时，属性自动递增，一般用于integer的类型 unique：true//是否唯一,如果设置为true保证数据库中的数据该属性具有唯一性 required:true }, knownDialects:{ collection:&apos;Dialect&apos; }, spouse: { model: &apos;Person&apos; } } Model和ORMModel 就是MVC 中的M，与Database schema 有密切的关系，甚至是完全可以对应。在Sails.js的理想下，它希望将所有的数据库都一视同仁，不管你是使用mongodb或着是MySQL都使用同样的语法呼叫数据库，可以无痛切换，所以定义了操作数据库的ORM模块Waterline，然后每一个不同的数据库，有独立的adapter跟waterline衔接。但理想是梦幻的现实是残酷的，要将原本就差异很大的关联式数据库与NOSQL 数据库，视为一视同仁，势必得舍去许多东西，ORM也非常难定义，再加上每个adapter得需跟上数据库改版的脚步，可以想像到的是一场灾难，这也是Sails.js 架构中，一直很诟病的地方，所以我并不会在waterline 中多琢磨，下篇直接介绍替代方案。 生命周期回调1、创建时的回调 beforeValidate: fn(values, cb)afterValidate: fn(values, cb)beforeCreate: fn(values, cb)afterCreate: fn(newlyInsertedRecord, cb)2、修改的时候回调beforeValidate: fn(valuesToUpdate, cb)afterValidate: fn(valuesToUpdate, cb)beforeUpdate: fn(valuesToUpdate, cb)afterUpdate: fn(updatedRecord, cb)3、销毁的时候回调 beforeDestroy: fn(criteria, cb) afterDestroy: fn(destroyedRecords, cb) 如在创建用户的时候对密码机密操作： var bcrypt = require(‘bcrypt’); module.exports = { attributes: { username: { type: &apos;string&apos;, required: true }, password: { type: &apos;string&apos;, minLength: 6, required: true, columnName: &apos;encrypted_password&apos; } }, beforeCreate: function (values, cb) { bcrypt.hash(values.password, 10, function(err, hash) { if(err) return cb(err); values.password = hash; cb(); }); } }; 建立APisails generate api article产生两个档案分别是api/models/Article.js 和api/controllers/ArticleController.js 建立modelsails generate model article title:string, content:text延伸阅读：attributes 建立controller在/api/controller下，建立一个名字为ArticleController.js的档案，里面的method包含有create、update、destory。sails generate controller article create update destroy 手动路由// config/routes.js module.exports.routes = { &apos;get /signup&apos;: { view: &apos;conversion/signup&apos; }, &apos;post /signup&apos;: &apos;AuthController.processSignup&apos;, &apos;get /login&apos;: { view: &apos;portal/login&apos; }, &apos;post /login&apos;: &apos;AuthController.processLogin&apos;, &apos;/logout&apos;: &apos;AuthController.logout&apos;, &apos;get /me&apos;: &apos;UserController.profile&apos; } 自动路由路由基本上要做的就是url 跟controller 的连接，在一开始我们就一直强调，Sails.js 是一个约定大于配置的框架，所以当然它也有不需配置就能使用的路由设计机制。通过config/blueprints.js的设置开启，可以做到不需手动设定，就能是识别你controller 的action 要走哪个router。 GET /user -&gt; UserController.find GET /user/:id -&gt; UserController.findOne POST /user -&gt; UserController.create PUT /user/:id -&gt; UserController.update DELETE /user/:id -&gt; UserController.destroy 方法1、模型已经自带有某些方法：.create(), .update(), .destroy(), .find(), etc. create():创建一个记录 User.create({username:&apos;jy&apos;,password:&apos;123456&apos;}).exec(function (err,created){ console.log(created); //返回的是创建的对象 }) findOne({username:&apos;jy&apos;}): //返回第一个对象 find({username:&apos;jy&apos;}): //返回一个数组 count({username:&apos;jy&apos;}): //返回结果为一个该结果集的条数 destroy({name:&apos;Flynn&apos;})： //销毁找到的结果 findOrCreate({username:&apos;jy&apos;},{username:&apos;jyjy&apos;})：//查询是否有第一个参数的记录，没有就创建第二个参数的记录 update({username:&apos;jy&apos;},{username:&apos;jyjy&apos;})： //修改记录 User.update({username:&apos;jy&apos;},{username:&apos;Flynn&apos;}).exec(function (err,updated){ if (err) { // handle error here- e.g. res.serverError(err); console.log(err) }else{ console.log(updated) } }); 以上方法都是使用的exec来执行生产结果(返回query对象)||也可以直接传回调参数 query： 用于直接调用底层的数据库驱动程序,如：直接使用原生的sql语句,适用于mysql或者相关的数据库 User.query(&apos;select * from user&apos;,function(err,results){ console.log(results); }) native:只适用于使用mongodb的情况,返回mongodb的对象直接操作数据库 stream： 一般用于socket的操作 var getSocket = req.socket; User.stream({name:&apos;Walter&apos;}).pipe(getSocket.emit); 2、我们也可以自定义方法：定义好后我们可以在任何动作中通过moduleName.methodName()调用 module.exports={ attributes:{ username:{ type:&apos;string&apos;, required:true }, password:{ type:&apos;string&apos;, required:true } }, findOnePerson:function(str){ console.log(&apos;findOnePerson---&apos;+str) } } 3、sails动态生成的方法如：User模型中有一个属性为username，User会为你生成一个findByUsername(‘someone’).exec(function(err,user){})]]></content>
  </entry>
  <entry>
    <title><![CDATA[代码review清单]]></title>
    <url>%2F2018%2F05%2F16%2F%E4%BB%A3%E7%A0%81review%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[常规项 代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。 所有的代码是否简单易懂？ 代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。 是否存在多余的或是重复的代码？ 代码是否尽可能的模块化了？ 是否有可以被替换的全局变量？ 是否有被注释掉的代码？ 循环是否设置了长度和正确的终止条件？ 是否有可以被库函数替代的代码？ 是否有可以删除的日志或调试代码？ 安全 所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？ 在哪里使用了第三方工具，返回的错误是否被捕获？ 输出的值是否进行了检查并且编码？ 无效的参数值是否能够处理？ 文档 是否有注释，并且描述了代码的意图？ 所有的函数都有注释吗？ 对非常规行为和边界情况处理是否有描述？ 第三方库的使用和函数是否有文档？ 数据结构和计量单位是否进行了解释？ 是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？ 测试 代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。 是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。 单元测试是否真正的测试了代码是否可以完成预期的功能？ 是否检查了数组的“越界“错误？ 是否有可以被已经存在的API所替代的测试代码？ 你同样需要把特定语言中有可能引起错误的问题添加到清单中。 这个清单故意没有详尽的列出所有可能会发生的错误。你不希望你的清单是这样的，太长了以至于从来没人会去用它。仅仅包含常见的问题会比较好。 优化你的清单把使用清单作为你的起点，针对特定的使用案例，你需要对其进行优化。一个比较棒的方式就是让你的团队记录下那些在代码审查过程中临时发现的问题，有了这些数据，你就能够确定你的团队常犯的错误，然后你就可以量身定制一个审查清单。确保你删除了那些没有出现过的错误。（你也可以保留那些出现概率很小，但是非常关键的项目，比如安全相关的问题）。 得到认可并且保持更新基本规则是，清单上的任何条目都必须明确，如果可能的话，对于一些条目你可以对其进行二元判定。这样可以防止判断的不一致。和你的团队分享这份清单并且让他们认同你清单的内容是个好主意。同样的，要定期检查你的清单，以确保各条目仍然是有意义的。有了一个好的清单，可以提高你在代码审查过程中发现的缺陷个数。这可以帮助你提高代码标准，避免质量参差不齐的代码审查。 之前在公司我们经常会进行代码review，选取某个人的项目代码——大约三百行，团队成员一起进行review。经历了多次的代码review之后，我觉得可以尝试一下公司项目review和开源项目review，可以作为一种代码review的进阶与提高。这里先记录下来，后面试着在团队里试行一下。]]></content>
  </entry>
  <entry>
    <title><![CDATA[用十年教会自己编程]]></title>
    <url>%2F2018%2F04%2F16%2F%E7%94%A8%E5%8D%81%E5%B9%B4%E6%95%99%E4%BC%9A%E8%87%AA%E5%B7%B1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[–本文英文原文为：Teach Yourself Programming in Ten Years 为何每个人都如此匆忙？随便走进一家书店，你就能看到《24小时学会Java》以及各种万变不离其宗的书籍，形如：在数天或是数小时内学会Visual Basic、Windows系统、互联网等等。我在亚马逊 做了个高级搜索 ： pubdate: after 1992 and title: days and (title: learn or title: teach yourself) [1] 共得到了248个结果。前78个是计算机类图书(第79个是《30天学会孟加拉语 》)。我把搜索中的“days (天)”替换成“hours (小时)”，结果得到了一个相似度惊人的结果：253本书中，前77本都是计算机类图书，紧随其后的第78本是《24小时内教会自己语法与格调 》。而在200名之后，有96%是计算机类图书。 由此可见：要么是人们都在急匆匆的学习计算机，要么就是出于某种原因计算机比其他任何东西都要好学。而没有一本书是关于如何在数日之内学会贝多芬或是量子力学甚至是狗的饲养的。Felleisen等人在《如何设计程序 》中也指出了这一趋势，他们说：“糟糕的编程非常简单，蠢货都能在21天的时间内学会，即便他们就是根木头都可以！” 让我们来分析一下诸如《24小时学会C++ 》这样的标题意味着什么： 自学： 3天的时间，你完全没有时间去完成一些大型程序，也无法从其中的成功与失败中汲取知识。你也没有时间和一个有经验的程序员一起工作并熟悉C++环境下的开发是个什么样子。总之，你没有时间去深入的学习。所以这种书只能给你一个肤浅的认识而非深入的理解。正像Alexander Pope说的——一知半解是件危险的事情。 C++： 3天内你可能学会一些C++的语法(前提是你学过其他编程语言)，但你学不到如何去使用这种语言。总而言之，如果你是——比方说——一个Basic程序员，你或许能学会以Basic的风格用C++语法编程，但你无法掌握C++真正的优点(或缺点)。问题何在？Alan Perlis曾说过：“如果一种语言不能影响你的编程思路，那就不值得学习。”唯一合理的解释就是你只需要学习一丁点的C++(类似的还有JavaScript或是Flash的Flex)以便为了某个特定目标而去连接一个现有工具的接口。但如果这样，你就不是在学习如何编程，而仅仅是在学习如何完成你的目标而已。三天内： 很不幸，正像我们在下一节中要展示的那样，这远远不够。 十年自学编程研究员们(Bloom (1985) , Bryan &amp; Harter (1899) , Hayes (1989) , Simmon &amp; Chase (1973) )已经指出在许多领域中想达到精通都需要花费十年左右的时间，这其中包括国际象棋、音乐创作、电报操作、绘画、钢琴演奏、游泳、网球以及对神经心理学或是拓扑学的研究。关键在于用心去练习：并非仅仅是一遍又一遍的单纯重复，而是要去挑战一个刚好高于你目前水平的目标。去尝试，并在做的时候以及完成后分析自己的表现，指出所有的错误。之后重复，再重复……这没有捷径：甚至是莫扎特——4岁时他就是个音乐神童了，但一样是用了13年的时间才创作出世界级的音乐。另一个例子，虽然看上去甲壳虫乐队是在1964年的埃德·沙利文秀上一夜走红的，但其实他们早在1957年就开始在利物浦和汉堡的小俱乐部中演出了，而且虽然很早就受到大众的青睐，但他们第一次重要的成功却是1967年发行的专辑——《Sgt.Peppers》。 MalcolmGladwell公布了一份关于柏林音乐学院学生的研究报告，比较了优等、中等和后进的三类学生并为他们制定了练习时间：三组人从几乎相同的年龄开始练习演奏——大约五岁左右。起初的几年中，每个人都练习几乎相同的时间——每周2到3个小时。但到了八岁左右的时候，真正的差距开始出现了。那些班中最优秀的学生的练习量开始超过其他人：九岁时达到每周6小时，十二岁时每周8小时，十四岁时每周16小时，越来越多。到了二十岁的时候，他们每周的练习时间超过了30小时。二十岁时，在精英演奏者的人生历程中共计练习了10,000小时。相较之下，仅仅是好学生的练习时间只有 8,000小时，而未来的音乐教师仅有4,000小时的练习。所以，或许10,000小时——而不是10年——才是一个神奇的数字。SamuelJohnson(1709-1784)认为这可能要花更长的时间：“要实现任何领域的卓越才能都是需要毕生奋斗的——不会再有更低的代价来获得它了。”而Chaucer(1340-1400)则抱怨“人生短暂，但却有太多技艺要学。”Hippocrates(约公元前400年)因那句“arslonga,vitabrevis”而闻名，全文是“Ars longa, vita brevis,occasiopraeceps,experimentumpericulosum,iudiciumdifficile”，这话用中文[2]表达出来既是“技艺永恒，生命短暂，机会易逝，实验诡诈，抉择艰难”。虽然在拉丁文中“ars”一词既可以表示“艺术”也可以表示“技术”，但在原本的希腊文中“techne”一词则只有“技能”的意思而非“艺术”。 所以你想成为一名程序员以下是我编程成功的诀窍： 对编程产生兴趣，并试着从兴趣出发去做些什么。你要确信它能持续的给你带来乐趣好让你能够为它倾注十年的心血。 与其他程序员交流，阅读其他的程序。这比任何一本书或一项训练都要重要。 编程，学习的最好方式就是边做边学。更学术性的说：“在特定领域内，个人能力的最高上限无法通过长期经验而自动获得。但即便是经验丰富的个人也可以通过刻意的努力而获得经验的提高。”(p.336)并且“最为有效的学习需要针对特定个体、信息反馈以及重复和改正错误的机会有一个适当难度的明确目标”(p.20-21)。《实践中认知：日常生活中的思想，数学与文化 》是一本对于该观点有趣的参考书籍。 如果你愿意，在大学中投入四年的时间(或者继续在研究生学院投入更多的时间)。这将使你获得一些工作的入门资质，并且会给你一些关于这个学科更加深入的认识，而如果你不喜欢上学，你也可以(需要一些贡献)在工作中获得类似的经验。但无论如何，仅仅看书是绝对不够的。“计算机科学的教育不会让任何人成为专业程序员，正如研究笔刷和颜料不会让任何人成为专业画家一样。”，《新黑客辞典》的作者EricRaymand如是说。我所聘用过的最好的程序员之一 [3] 仅拥有高中学历。他却创造出了很多伟大的软件，拥有他自己的新闻组，甚至在股票期权中赚到足够的钱买下一家自己的夜总会。 与其他程序员共同完成一些项目。在某些项目中成为最出色的程序员，而在其他一些项目中成为最糟糕的。当你最出色时，你将有机会测试自己领导一个项目的能力，并且以你的视野去激励其他人。当你最糟糕时，你要学习大师们做了什么，而不喜欢做什么(因为他们让你去为他们做)。 从其他程序员那里接手一些项目。理解其他人编写好的程序。看看有什么需要理解的，并在原作者不在的时候试着自己去解决一些问题。考虑一下如何设计你的程序能让它更容易被那些从你手里接手项目的人们理解。 学习至少六种编程语言。其中包括一种支持类抽象的语言(如Java或C++)，一种支持函数抽象的语言(如LISP或ML)，一种支持语法抽象的语言(如LISP)，一种支持声明规范的语言(如Prolog或C++模板)，一种支持协程的语言(如Icon或Scheme)以及一种支持并行处理的语言(如Sisal)。 牢记在“计算机科学”中有一个“计算机”。你要知道计算机需要多长时间去执行你的一条指令、需要多长时间从内存中读取一个字(带有或不带有缓存缺失)、需要多长时间从磁盘中连续读取字符以及需要多长时间完成磁盘的重新定位。(答案在这里 ) 参与一个语言的标准制定工作。这可以是ANSIC++委员会项目，也可以仅仅是决定你的代码是用2个还是4个空格作为缩进。但无论如何，这将会让你学到其他人对语言的偏好以及他们到底对此有多么偏好，甚至你还可能明白为什么他们会有此偏好。 拥有尽快从语言标准化工作中抽身的理智。出于以上经验，我很怀疑你能从书本中学到多少。在我第一个孩子出生前，我读了所有的指南书籍，但依然感到茫然无措。30个月之后，当我第二个孩子出生的时候，我还需要回去复习那些书籍么？不，这次完全凭借我的个人经验了。这对我来说显然比专家们写的数千页的纸张更有效果。 Fred Brooks，在他的文章《没有银弹 》中指出了寻找一位伟大的程序设计者的三个步骤： 尽早系统的确定一批顶级设计者队伍。 指派一个业务主管来负责前景的发展以及确保职业规划。 为增进设计师们的互相影响与激励提供足够的机会。 这样做的前提是已经假定了某人具有一个伟大设计者所应有的素质，他要做的只是去引导其他人的前进。Alan Perlis 将这些变得更加简洁：“每个人都能学会雕塑：米开朗基罗这样的人反倒需要学习如何不去雕塑。伟大的程序员也是如此。”所以，尽管去买那本Java的教程吧。或许你能从中学到些什么，但你不会因此改变人生，也不会在24小时、24天甚至是24个月之后成为一个真正的程序员。 参考文献：Bloom, Benjamin (编)《在年轻人中培养人才 》, 百龄坛, 1985.Brooks, Fred, 《没有银弹 》, IEEE计算机, vol. 20, no. 4, 1987, p. 10-19.Bryan, W.L.和Harter, N.《电报语言研究：一种习惯上的收获》, 心理学回顾, 1899, 8, 345-375Hayes, John R., 《完全问题求解 》, Lawrence Erlbaum, 1989.Chase, William G.和Simon, Herbert A.《国际象棋的感知 》, 认知心理学, 1973, 4, 55-81Lave, Jean, 《实践中认知：日常生活中的思想，数学与文化 》, 剑桥大学出版社, 1988. 附录：语言的选择许多人都问我应该首先学习哪种编程语言。答案并不唯一，但需要考虑以下几点： 善用你的朋友们。每每被问及“我该用哪种操作系统，Windows、Unix还是Mac？”的时候，我的回答总是：“用你的朋友们都在用的那种。”你在朋友那里学到的东西要远大于操作系统或编程语言之间的固有优势。但也要考虑到你未来的朋友：若你继续学习，你肯定会加入到某个程序员社区中去。 你所选择的语言是否拥有一个大规模发展的社区？还是濒临灭绝？是否有足够的书籍、网站或在线论坛让你寻找答案？你是否喜欢那些社区中的人们？ 保持简单。像C++或Java这种编程语言是为那些由关心他们代码执行效率且经验老道的程序员组成的大规模团队来进行专业开发而设计的。因此，这些编程语言都拥有为这些情况而设计的复杂结构。你关心的是学习编程，而不是那些复杂的东西。所以你需要的是一种为了程序员新手便于记忆和学习而设计的语言。 运行。你更喜欢哪种学习钢琴演奏的方式：正常的交互模式，当你按下一个琴键的时候立刻就可以听到对应的音符。还是“批发”模式，只有在你完成整段乐曲之后才能听到声音？显然互动模式让学习钢琴变得更简单，编程亦是如此。坚持一种交互模式的语言并使用它。 给出以上这些准则，我建议首先学习的语言是Python 或Scheme 。但你自身的情况可能有所不同，所以还有很多其他不错的选择。如果你的年龄是个位数，你可能更喜欢Alice 或Squeak (年长一些的学习者可能也会喜欢这些)。重点在于——你选择并且你开始。 附录：书籍与其他资源常有人问有哪些书籍或网站可以学习。我重申“仅仅看书是绝对不够的”，但我可以推荐以下这些： Scheme： 《计算机程序的结构与诠释》(Abelson和Sussman)可能是对计算机科学最好的介绍，同时作为了解计算机科学的一种途径，本书也讲解如何编程。你可以看这本书的在线视频讲座，或是完整的在线文本。这本书具有挑战性并将淘汰一些用其他方法取得成功的人。 Scheme： 《如何设计程序 》(Felleisen等编)是一本非常优秀的介绍如何用典雅又不失实用的方式去编程的书籍。 Python： 《Python编程：计算机科学导论 》(Zelle)是一部用Python完成的不错的导论。 Python： Python网站 上的一些在线教程 都是非常实用的。 Oz： 《计算机编程的概念，技术和模型》(VanRoy和Haridi)被认为是当代Abelson与Sussman的继承者。本书通过编程的整体构思，在更易于阅读和学习的同时，较之Abelson与Sussman获得了更广泛的视野。该书使用了一种叫做Oz的编程语言，虽然它并不被大众所知，但可以很好的作为其他语言的基础来学习。作者注释T. Capey指出，亚马逊网站上《完全问题求解》一书的页面中，“购买此商品的顾客也同时购买”一项里已经出现了《30天学会孟加拉语》和《24小时内教会自己语法与格调》。我猜这其中大部分的人是从此文中看到那些书的。感谢Ross Cohen在Hippocrates问题上对我的帮助。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人分享：浏览器渲染和优化]]></title>
    <url>%2F2018%2F04%2F01%2F%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%92%8C%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[今天我要分享的主题是 “浏览器渲染和优化方案”，以上是我要讲的一些要点，具体就是我为什么讲这个东西，具体的内容有哪些，有什么指导意义，以及一些案例的演示，那么下面咱就开始吧，我将从Why、What、How三个方面来写。 Why在准备分享之前我一直纠结，到底给分享什么，很高深的我讲不明白，太简单了讲了也没意义。后来浩源说：可以将你们工作以来一直想钻研却没有机会的学的东西，我想了一下：接触前端以来，我就好奇代码怎么就成了网页的呢，浏览器对它干了什么，对于不懂计算机的人来说这真是太神奇了，而我们却习以为常。但是在准备这场分享之前，我知道网页渲染是无非是：html生成dom树，css生成css规则树，然后合成渲染树，用GPU渲染出来。我觉得这还是太浅薄了，这一块的东西，这一块详细的话估计可以写成一本书，网上有相关的系列博客都非常长，有上万字。看完没啥感觉，里面还涉及编译原理的知识。这种东西我估计大家平时根本不会主动去看，因为感觉不实用。所以我就精简出来自己感觉有用的东西与大家分享一下。 这就说到了我分享这个主题的第二个原因了，大家觉得我们开发产品的用户是谁呢？老板还是公司员工、保洁、保姆阿姨们？我的答案是：浏览器，浏览器才是我们的用户，我们输出的代码其实是给浏览器用的，然后浏览器输入的内容才是给用户的。而那个保洁阿姨什么的都是浏览器的用户。所以作为前端开发者，居然连自己的用户都不了解，你们不觉得恐怖吗，这让我想起了我们做化学实验，总是按照手册上的步骤将各种药水混合起来，然后效果出现了就万事大吉了，可是说不定那天错了一步可能就牺牲了。一样的道理，前端开发者也是根据API、写一堆代码往浏览器扔，觉得只要语法、逻辑没有什么错误就能过，其实这是一样的道理。说不定那天浏览器就爆炸罢工了。所以我觉得一个好的FE应该对浏览器好一点，让他跑的快一点。总结起来就一句话，让用户满意。怎么让用户满意呢？当然是了解它，那下面就来了解一些具体的内容。 What浏览器组成 用户界面 浏览器引擎 渲染引擎（内核） 网络 用户界面后端 JavaScript 解释器 数据存储 浏览器渲染引擎 IE（Trident） Chrome28+（Blink） Firefox（Gecko） Opera（Blink） Safari（Webkit） UC（U3） QQ浏览器/微信webview（X5/+-Blink） 渲染引擎 －解析DOM文档和CSS规则并将内容排版到浏览器中显示有样式的界面，也有人称之为排版引擎，我们常说的浏览器内核主要指的就是渲染引擎。 浏览器渲染过程html页面的呈现流程 浏览器把获取到的HTML代码解析成1个DOM树，HTML中的每个tag都是DOM树中的1个节点，根节点就是我们常用的document对象。DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。 浏览器把所有样式解析成样式结构体，在解析的过程中会去掉浏览器不能识别的样式，比如IE会去掉-moz开头的样式， DOM Tree 和样式结构体组合后构建render tree, render tree类似于DOM tree，但区别很大，render tree中每个NODE都有自己的style，而且 render tree不包含隐藏的节点 (比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。 对renderTree的一些操作会触发，重排和回流。 当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。 渲染树构建完成，接下来是不是就可以呈现到页面上了呢？不，浏览器还有个层叠上下文。就是决定元素间相互覆盖关系(比如z-index)的东西。这使得文档流中位置靠前位置的元素有可能覆盖靠后的元素。如果没这个步骤，可能层次关系就是混乱的。 上面的过程可以搞定绘制过程。但是浏览器里面经常有动画、video、canvas、3d的css等东西。这意味着页面在有这些元素时，页面显示会经常变动，也就意味着位图会经常变动。每秒60帧的动效里，每次变动都重绘整个位图是很恐怖的性能开销。 因此浏览器为了优化这一过程。引出了Graphics Layers和Graphics Context，前者就是我们常说的合成层(Compositing Layer)：Graphics Layer（合成层）可看作是一个图形缓冲区，被若干Render Layer共用。Graphics Layer（合成层）可看作是一个图形缓冲区，被若干Render Layer共用。 DOM Tree 把HTML文档解析为DOM树的过程 遇到标签则停止解析，先执行js DOM解析完成后触发DOMContentLoaded事件 此时图片资源并未加载完成 display: none的元素也在DOM树中 标签也在DOM树中 注释也在DOM树中 将CSS代码解析为CSS规则树的过程 与DOM解析同步进行 与script的执行互斥 Webkit内核进行了script执行优化 DOM Tree + CSS Rules = Render Tree 每个节点为一个Render Object对象，包含宽高、位置、背景色等样式信息 宽高和位置是通过Layout（重排）计算出 Render Tree和DOM Tree不完全对应 display: none的元素不在Render Tree中 visibility: hidden的元素在Render Tree中 float元素、absolute元素、fixed元素会发生位置偏移 常说的脱离文档流，就是脱离Render Tree 渲染层：将Render Tree上的某些节点提升到同一个Layer的过程 处理定位、裁剪、页内滚动、CSS Transform/Opacity/Animation/Filter、z-index排序等 所有Render Layer组合成一棵Layer Tree 浏览器基于Layer Tree进行Paint 每个render Layer都有一些属于自己的RenderObject，第二个renderLayer的renderObject是上一个的子元素，所以左边的render Tree 对应的 RenderLayer 也是一颗树,RenderLayer树的构建为渲染阶段处理z-index、opacity、overflow、scrollbar等打下一定的基础，在我们了解渲染的处理过程时我们再来深入的了解。在这里我们初步的了解到在构建Render树的同时会维护一颗RenderLayer树，为分层布局、渲染作准备。 生成Render Layer的条件 根元素 有明确的定位属性 透明元素（opacity不为1） backface-visibility 属性为 hidden 有 CSS reflection 属性 有 CSS column-count 属性（不为 auto）或者 有 CSS column-width 属性（不为 auto） 当前有对于 opacity、transform、filter、backdrop-filter 应用动画（为提升为GraphicsLayer做准备） overflow 不为 visible 不需要 paint 的 PaintLayer，比如一个没有视觉属性（背景、颜色、阴影等）的空 div 将Layer Tree上的某些节点进一步提升与合并 GPU直接渲染，快于CPU 当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层 对于 transform 和 opacity 效果，不会触发 layout 和 paint 没有Graphics Layer的元素与父元素共属同一个 过多的合成层会造成GPU传输的压力 生成Graphics Layer的条件 video、canvas元素，flash插件 拥有perspective、CSS3D变形的元素（perspective 属性设置元素被查看位置的视图） backface-visibility 为 hidden（backface-visibility:隐藏被旋转的 div 元素的背面：） 对 opacity、transform、filter、backdropfilter 应用了 animation 或者 transition 设置了will-change属性的元素（will-change: 提前告诉浏览器要进行动画相关的操作） 层之间的层叠遮盖 HOW（常用优化手段）资源引入位置 css文件放在head中，先外链的，后本页的 js文件放在body底部，先外部库，后本页的 兼容处理的js文件应放在head中，如babel-polyfill.js 页面布局的js文件应放在head中，如flexible.js body中间尽量不写style标签和script标签 异步加载js文件蓝色代表网络读取，红色代表执行时间，都是针对脚本的。绿色代表html解析 DOM操作相关 缓存DOM（变量） 批量操作DOM （字符串拼接） 在内存中操作DOM（document.createDocumentFragment()） 通过类修改DOM样式（将样式封装成class，减少repaint和reflow） 通过事件代理绑定事件 DOM读写分离（类似nextTick函数，在下次DOM更新循环结束之后执行的延迟回调） 总结遇到性能瓶颈时的解决依据为平时编码提供规范进行performance review时的思路策略 参考资料http://taobaofed.org/blog/2016/04/25/performance-composite/https://juejin.im/entry/59f010fdf265da4315231caa推荐书籍《Webkit技术内幕》]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Emmet使用技巧]]></title>
    <url>%2F2018%2F03%2F05%2FEmmet%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[使用”&gt;”号来生成子元素 div&gt;ul&gt;li 12345&lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 使用“+”来生成同级元素： div+p+dq123&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;dq&gt;&lt;/dq&gt; 使用“^”返回父层元素来添加新的元素 div&gt;p&gt;span+em^bq1234&lt;div&gt; &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt; &lt;blockquote&gt;&lt;/blockquote&gt;&lt;/div&gt; 返回两级 div&gt;p&gt;span+em^^bq1234&lt;div&gt; &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;/blockquote&gt; 生成重复元素 ul&gt;li*5 1234567&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 组合操作符 div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p 1234567891011&lt;div&gt; &lt;header&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;footer&gt; &lt;p&gt;&lt;/p&gt; &lt;/footer&gt;&lt;/div&gt; 添加ID和CLASS div#header+div.page+div#footer.class1.class2.class3 123&lt;div id=&quot;header&quot;&gt;&lt;/div&gt;&lt;div class=&quot;page&quot;&gt;&lt;/div&gt;&lt;div id=&quot;footer&quot; class=&quot;class1 class2 class3&quot;&gt;&lt;/div&gt; 自定义属性 d[title=”Hello world!” colspan=3]如果不包含空格的话，你不需要使用引号: td[title=hello colspan=3] 这样也同样好使1&lt;td title=&quot;hello gbtags&quot; colspan=&quot;5&quot;&gt;&lt;/td&gt; 自动生成连续编号 ul&gt;li.item$*51234567&lt;ul&gt; &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;&lt;/ul&gt; ul&gt;li.item$$$*51234567&lt;ul&gt; &lt;li class=&quot;item001&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item002&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item003&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item004&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item005&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 生成标签内容 a{更多信息}1&lt;a href=&quot;&quot;&gt;更多信息&lt;/a&gt; 使用的格式相关注意事项 Emmet中需要注意不要添加额外的空格以下可以正常工作(header&gt;ul.nav&gt;li5)+footer但是这行不能正常工作(header &gt; ul.nav &gt; li5) + footer标签模糊输入.wrap&gt;.content等价于 div.wrap&gt;div.content ul&gt;.item3 等价于 ul&gt;li.item3 快速生成占位文字 lorem 12//生成一段占位文字Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis hic dolorem recusandae culpa officiis ullam doloribus aut voluptatibus. Dicta aliquam dolorum nesciunt at adipisci dignissimos vitae iure perspiciatis modi illum. 生成重复文字p*4&gt;lorem 生成针对不同浏览器带有特定前缀的CSS -bdrs1234//生成-webkit-border-radius: ;-moz-border-radius: ;border-radius: ; @kf1234567891011121314151617//生成@-webkit-keyframes identifier &#123; from &#123; &#125; to &#123; &#125;&#125;@-o-keyframes identifier &#123; from &#123; &#125; to &#123; &#125;&#125;@-moz-keyframes identifier &#123; from &#123; &#125; to &#123; &#125;&#125;@keyframes identifier &#123; from &#123; &#125; to &#123; &#125;&#125; -chrorme-foo123456//生成-webkit-chrorme-foo: ;-moz-chrorme-foo: ;-ms-chrorme-foo: ;-o-chrorme-foo: ;chrorme-foo: ; 快速生成CSS渐变代码 lg(left, #CCC 30%, orange)123456//生成 background-image: -webkit-gradient(linear, 0 0, 100% 0, color-stop(0.3, #CCC), to(orange)); background-image: -webkit-linear-gradient(left, #CCC 30%, orange); background-image: -moz-linear-gradient(left, #CCC 30%, orange); background-image: -o-linear-gradient(left, #CCC 30%, orange); background-image: linear-gradient(left, #CCC 30%, orange); 模糊搜索快速生成CSS代码 ov:h12//生成overflow:hidden d:b123//生成display: block;`]]></content>
      <tags>
        <tag>Emmet</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[chrome调试笔记]]></title>
    <url>%2F2018%2F01%2F27%2Fchrome%E8%B0%83%E8%AF%95%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[主要包含Chrome浏览器一些调试方法 使用jQuery语法如果在页面没有使用jquery库的时候，在chrome的console控制台只能使用$选择器，不能使用jquery的方法。为了调试方便，可以手动的为页面引入jquery库。 在控制台输入以下代码片段：1234var jq = document.createElement('script'); jq.src = "http://apps.bdimg.com/libs/jquery/1.8.3/jquery.min.js"; document.getElementsByTagName('head')[0].appendChild(jq); jQuery.noConflict(); //解决库冲突]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17总结&18规划]]></title>
    <url>%2F2017%2F12%2F31%2F%E6%96%B0%E5%B9%B4%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[16年底我第一次写了我的第一篇年终总结，到现在忘得不清不楚。不过没关系，那只是第一次尝试，现在来看，那个时候只是知道了是什么、为什么，却不知道怎么做？所以2017年应该是我从理论转向实践的一个过渡，也是从校园到社会的一个缓冲。 2017年大部分时间还是在学校，大三最后一学期，我结束了大学所有的考试，保持了不挂科的清白之身，并且拿到了奖学金，说起来还是很自豪的。至此，求学生涯基本上可以说结束了，就差明年的毕业论文和答辩了。 今年的下半年我大四来到北京实习，求职经历我也专门写了一篇文章，这里就不多说了。下面就盘点一下2017，规划一下2018。 2017回顾 ● 2017感觉是很混沌的，经历各种形形色色的人和事，一直都没有进入一个有序稳定的状态，17年最后一个月我才有所变化，开始设定了一些属于自己的默认设置。我尝试记录了两项活动：健身和阅读，记录显示：健身5h 9m，阅读7h 59m，占这个月总时间的1.8%，虽然微不足道，但是毕竟已经开始尝试了，我觉得进步的空间很大。 ● 最近的一段时间，准确的说是12月07日我突然有了个习惯——每日一分。就是每天在微信朋友圈记录今天工作和生活上的两三件事或感想，一直到现在我还在记录。这种坚持先对来说很轻松，有着潜移默化塑造力。 ● 17年的我有点跟不上节奏，环境的转变，关系的转变让我一时难以接受。最后发现其实是我不够了解自己，。 ● 17年给我最大的感受就是我接受了这个世界的多样性。之前我是一个爱憎分明的人，遇到我看不惯的人和事，会觉得这人是傻吗，世界上怎么会有这种事呢？有时候心里也会很愤怒，但是现在我的态度是：不放在心上，干自己的事。他人的成长、教育、经历的人和事都与众不同，他们所作出的每一个选择都是他们认为最好的。我们又何必为别人操碎了心，而忘记自己的成长呢。 ● 2017年初入职场，暴露出各种问题，给人的感觉非常混乱，而我能做的只是一点点去拆解，去验证再修正。说到这让我想到了两句很经典的话：“考上大学就好了”，“找到工作就好了”，殊不知当站在那个位置的时候发现好像永远没有终点。其实我们早就应该明白，人生没有尽头，只有路口。 2018的打算工作方面：1.学习小程序 2.深入学习node.js 3. 查漏补缺深入拓展总结整理前端三剑客 vue源码 5.熟练设计模式 6. 个人技术博客的完善 为团队做出贡献（想法、创意、内容） 投资：1.个人健康 2.个人成长 3.个人兴趣 兴趣方面：读书（非技术，需要读书笔记和观后感）摄影（方法技巧、发现美的眼睛）视频剪辑（AE，向一位专业的朋友请教）运动（健身房月次超过18天）写作（学习思考自己的写作方法论，提高写作的速度和条理性）电影（不低于3次影院）]]></content>
      <tags>
        <tag>总结</tag>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重新认识爱因斯坦]]></title>
    <url>%2F2017%2F11%2F27%2F%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%2F</url>
    <content type="text"><![CDATA[很久很久以前我就知道爱因斯坦这个人，那时只知道他是一个为伟大的科学家，仅此而已。直到写这篇文章之前我也只是知道一些诸如相对论、量子学、原子弹相关的名词而已，但是对待一个如此伟大的人，我觉得是时候去了解一下了。 爱因斯坦不仅有世界最疯狂的发型，更有一个最聪明大脑。幼年的爱因斯坦很晚才说话，家中的女仆都称他是傻孩子，但是带他看医生才发现，他只是喜欢一开口就说出完整的句子。年幼的爱因斯坦开始探索日常生活的世界，他自己曾说过有两样东西影响他早年的生活：一件是5岁时得到的一个指南针，一件是12岁时收到的一本几何书，他对神秘现象和数学深深着迷。 爱因斯坦和别人有着不同的思考方式，这使得他和老师关系不佳。事实上在他口中，学校是”军营“，老师则是”中尉“，由于没有一科及格，“列兵”爱因斯坦成为了一名高中辍学少年。他也没通过瑞士苏黎世联邦理工学院的考试，不过17岁时他又考了一次，并且高分通过。不过这是他仍然十分叛逆，时常与老师作对，他认为教育制度扼杀了创新，他从不循规蹈矩，经常向老师提出质疑，这令老师们十分头疼。所以到22岁仍然失业，前途渺茫，而且还有一个怀孕的女友，但幸运的是他在瑞士专利局谋得了一份小差事，而他自己把这段经历成为补鞋匠生涯，这一补就是七年，这七年他一直在做自己最喜欢的事：思考。 他认为那段时间是具有非常积极的影响，这个时期他写了大量重要的论文，一边完成自己专利审查员的工作，一边思考着，所以他当时的工作并没有爱因斯坦造成负面影响，反倒是帮了忙。因为如果他置身学术界，他会受到很多干扰。爱因斯坦的伟大理念： 想象一下你正在追一辆公共汽车，它的时速是48公里，而你时速只能达到47公里。公共汽车的每小时比你快1公里，你只要稍微加速就可以追上它。但是如果把公共汽车的换成一道光束（大约每秒30万公里左右），那么无论你如何加速，你们之间的速度差一直不变，这个差就是光速。这种说法似乎听起来很难理解，但是20世纪初实验已经证明这个结论是正确的，光速确实恒定不变的。 他通过一个有趣的思想实验推断改变的不是光，而是时间本身。因为光速是不变的，空间和时间的概念必须有所改变，排除距离因素之后，剩下的只有时间了。这意味着时间本身不再是绝对，而是相对的，这正是爱因斯坦取得的重大突破。这个一个非常反直觉的观点，但事实证明它是对的。 质能方程式E=MC^2其实就是能量=质量*光速的平方，由于光速的平方是一个非常大的数字，所以即使是一件很小的物品，例如一枚回形针，也相当于巨大的能量，确切来说相当于1.8吨三硝基甲苯炸药或者一颗原子弹。这是一道意义深远的方程式，人们花费了数年时间才将其掌握，爱因斯坦在这个方程式里体现出了能量与质量是相关的。设想你坐在一艘宇宙飞船里，试图追上光速，火箭燃料正在一如既往地猛烈燃烧，可是当你接近光速后，你会发现速度在变小，可是还没有到达光速，火箭的燃料仍然再继续燃烧并产生能量，而这能量必然得有个去处，如果你一直没达到光速，那意味着你变得更难推进了，即你变得越来越重了，所以你的质量正在增加，也就是说火箭产生的能量其实转换成了你增加的质量。所以爱因斯坦意识到质量本身就是一种形式的能量。这正是质能方程式的精髓。 同时他告诉我们还不止这些，它告诉我们少量的物质可以被转化成巨大的能量。无论哪种物质是什么，苹果酱、石头、或者是猴子的耳垢，从理论上说它们都是可以被转化成能量的原子。问题是释放哪些能量又需要相当大的能量，其中一种方法是核裂变，将一个大的原子核，例如铀，一分为二，就会有一部分转换为能量，同时带有可怕辐射的副产品。另一种方法是核聚变，使两个氢原子核进行聚合，形成一个氦核，并产生一些能量，但是首先你需要大约1亿摄氏度的高温环境，这就是太阳等恒星可以进行核聚变的原因。如果我们能够在地球上解决这一个问题，可控的核聚变将为我们带来无尽的清洁能源。一座核聚变发电站每天要消耗大约1公斤的燃料，那相当于一大袋白糖，而一座燃煤发电站每天要消耗数百卡车的煤炭，这下你该明白我们可以从核聚变中获得多么大的能量了吧。这个想法确实过于乐观，因为目前氢弹是我们唯一实现的一种高能效核聚变，而他绝对是不可控的，但科学仍在进步中。 爱因斯坦知道他的第一个相对论遗漏了某种因素：引力，所以他重新将其标记为狭义相对论，并开始对一个全新的版本进行攻关，他把这个版本成为广义相对论。传说当时爱因斯坦正坐在办公室里看到一个人修理屋顶，他想象着这个可怜的家伙掉了下来，这个念头令他获得了他所说的”一生中最快乐的想法“。这个人坠落时实际处于零重力状态，如果把他放到一个同样在自由下落的封闭盒子里，他无法得知自己正在移动，这种状况会持续到他落地的一刻。爱因斯坦意识到重力其实只是一种错觉，尽管它造成的效果一如既往的真实。爱因斯坦花了十年来研究有关细节，最终他描绘了一幅由时间、空间和重力构成的全新图景，在这新的宇宙里，重力放慢了时间。他把三维空间和时间结合在一起，并得出了时空的概念。这是一个难以理解的概念，因为我们生活在一个三维空间，我们没法描述一个四维空间。除了上下左右前后，还有另外一种方向，而我无法指向它，很遗憾，因为我只能在空间里指出方向，但这种方向如果我们能指出来，那就是时间方向。 我们可以把时空看做是一块橡胶板，如果你考虑到重力的话，它让这块橡胶块产生了凹陷，如果我将一颗行星放进我的时空里，它会使时空变形，那就是我的重力井。所以我们并不只是将它看作一种力，而是将它看作时空里的一种扰动。我们说引力作用使它们围绕着更大的物体运动，但如果引力并不存在的话，那么肯定有其他的某种因素使物体可以直线运动，当又让它们的路径呈现弧形，的确，弧形表面就可以实现这一点，所以如果你想以最短距离从北京直飞到纽约，你可以选择直线前进，但如果你从太空中看那条直线，你会发现它其实是条弧线，因为你将会绕地球表面飞行。爱因斯坦发现曲率在本质上与引力是相同的，于是我们有了这个弧形的四维时空，这其实就相当于引力。离地心越远引力就越弱，就衰老速度而言你的头每天会比你的脚快千亿分之一秒，而到你的80岁生日时你的颅骨已经比你的脚趾老了300纳秒，这只有一眨眼的百万分之一。 广义相对论真正意义上摆脱了固有的思维方式，爱因斯坦利用思想实验的方法来想象场景，但是此前没人想过这一点。爱因斯坦思考问题的方式和整合知识的方法都是独一无二的。 爱因斯坦的观点是正确的，一个天文实验证明了引力会使光线弯曲，而这颠覆了我们过去对空间、时间和宇宙的一切认知，爱因斯坦也因此成为了世界名人。广义相对论在国际上引起了巨大轰动，这对科学理论来说是非常罕见的，我觉得广义相对论触及了我们能感知到的世界，它深化了我们对宇宙的理解和认知，牛顿学派的世界观被彻底粉碎了。自从人类可以思考，我们就一直仰望星空，好奇哪里有什么，而爱因斯坦为我们提供了一扇更广阔的窗口。 至此广义相对论就告一段落，后面在这个基础上发生了很多事：比如关于量子物理学的探究、宇宙大爆炸的理论、拒绝了以色列让他成为总统的邀请以及后来爱因斯坦鼓励美国总统罗斯福下令研发原子弹，这是个异常艰难的决定，因为爱因斯坦是一位和平主义者，一生都在争取和平。 爱因斯坦于1955年离开了这个四维世界，一位尸检师偷走了他的大脑，他很想弄清楚大脑和天才之间的是否存在生理联系，他想揭秘爱因斯坦才华的奥密。最终人们发现爱因斯坦的大脑大小和普通人一样，这使得脑子越大，人越聪明的说法不攻自破。研究发现由于大脑外侧裂未发育完全，爱因斯坦的大脑顶叶比普通人宽了15%，大脑的这一区域控制着数学运算和空间认知，就绝对是爱因斯坦最为擅长的两科。除此之外爱因斯坦76岁的脑灰质似乎没有显示出任何老化的迹象，因此爱因斯坦拥有天赋的关键或许就在于他拥有年轻的心态，或者说年轻的大脑。 我认为实际是他一直废寝忘食地工作，拥有孩子般的专注力和好奇心，他拥有自己的人生哲学，这有助于他发展自己的理念。阿尔伯特.爱因斯坦是一个伟大的天才，为我们带来了新的宇宙观。他是有史以来最伟大的物理学家，他为21世纪的科学奠定了基础，他引进了新概念，并提出了此前从未有人考虑过得新想法，他改变我们对宇宙的认知，这项成就意义广泛。]]></content>
      <categories>
        <category>人物</category>
      </categories>
      <tags>
        <tag>人物</tag>
        <tag>爱因斯坦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css碎碎念]]></title>
    <url>%2F2017%2F10%2F25%2Fcss%E7%A2%8E%E7%A2%8E%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[实现底部footer 外部有一个wrapper容器，要min-height:100%;撑满页面高度。 footer参考wrapper绝对定位，用bottom:0定在底部 main用来放置页面主体内容，padding-bottom与footer高度一致，用于页面长的时候给footer撑出高度 文本不换行省略效果123white-space: nowrapoverflow:hiddentext-overflow:ellipsis 瀑布流原理 瀑布流布局要求要进行布置的元素等宽，然后计算元素的宽度与浏览器宽度之比，得到需要布置的列数。创建一个数组，长度为列数，里面的值为已布置元素的总高度（最开始为0）然后将未布置的元素依次布置到高度最小的那一列，就得到了瀑布流布局。 transition一个速记法：transition: css属性 动画持续时间 动画类型 动画延迟时间； 两列布局一列宽度固定，一列宽度不固定1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556方法一：把side改写为绝对定位.side&#123; position:absolute;left:0;top:0; width:200px;height:200px; background:red; &#125; .main&#123; margin-left:210px; background:blue; height:200px; &#125; 方法二：把side改写为浮动.side&#123; width:200px; height:200px; float:left; background:red; &#125; .main&#123; margin-left:210px; background:blue; height:200px; &#125; 方法三：flex布局.parent &#123; display:flex; &#125; .side&#123; width:200px; height:200px; background:red; margin-right:10px; &#125; .main&#123; background:blue; height:200px; flex:1; &#125;方法四：利用BFC不与浮动元素重叠的特性.side &#123; width: 200px; height: 100px; float: left; background: red; margin-right: 10px; /* 这里没有flex才能按自身设定的宽度渲染 *//* 如果有了flex则宽度设定无效 */&#125; .main &#123; /* 创建BFC */ overflow: hidden; background: blue; height: 100px; &#125; 如何进行水平垂直居中(行内块元素)12345678910111213141516171819202122232425262728方案一：用display: table-cell;内部元素如果是display:block;则无效.box&#123; display: table-cell; vertical-align:middle;/*垂直居中*/ text-align:center;/*水平居中*/&#125;方案二：单纯flex布局.box&#123; display: flex; justify-content:center;/*水平居中*/ align-items:center;/*垂直居中*/&#125;方案三：flex与margin:auto;结合.box&#123; display: flex;&#125;button&#123;margin: auto;&#125;方案四：绝对定位与0.box&#123; position:relative;/*需要父元素定位*/&#125;button&#123; overflow: auto; margin: auto; position: absolute; top: 0; left: 0; bottom: 0; right: 0; &#125; 三栏水平布局，其中 left 、 right 分别位于左右两边， left 宽度为 200px ， right 宽度为 300px ， main 处在中间，宽度自适应。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143/*三栏结构大致如下*/&lt;divclass=&quot;container&quot;&gt; &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;&lt;/div&gt; //Flex 布局 .container &#123; display:flex;&#125;.main&#123; flex: 1; background-color:#eee;&#125;.left&#123; flex-basis:200PX; order:-1; background-color: lightblue;&#125;.right &#123; flex-basis: 300px; background-color:lightblue;&#125;//方法二：绝对定位布局 .container &#123; position: relative; &#125; .main &#123; margin-left: 200px; margin-right: 300px; &#125; .left &#123; position: absolute; top: 0; /* 外层设置 padding 时才需要 */ /*left: 0;*/ &#125; .right &#123; position: absolute; top: 0; right: 0; &#125; /* 圣杯布局 */ .container &#123; /* 这里不能使用 overflow: hidden; 清除浮动 */ /* 不然会使 aside(.left &amp; .right) 被 hidden */ margin-left: 200px; margin-right: 160px; &#125; .container::after &#123; /* 借助伪元素清除浮动 */ clear: both; display: block; content: &apos;\200b&apos;; width: 0; height: 0; &#125; .main &#123; float: left; width: 100%; &#125; .left &#123; float: left; margin-left: -100%; position: relative; right: 200px; &#125; .right &#123; float: left; margin-right: -160px; &#125; /*三栏的 HTML 结构大致如下：*/ &lt;main&gt; &lt;div class=&quot;content-wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;aside class=&quot;left&quot;&gt;&lt;/aside&gt; &lt;aside class=&quot;right&quot;&gt;&lt;/aside&gt; &lt;/main&gt; /* 双飞翼布局 */ main &#123; /* 这里可以使用 overflow: hidden; 清除浮动 */ overflow: hidden; &#125; .content-wrapper &#123; float: left; width: 100%; &#125; .content &#123; margin-left: 200px; margin-right: 160px; &#125; .left &#123; float: left; margin-left: -100%; &#125; .right &#123; float: left; margin-left: -160px; &#125; /*三栏的 HTML 结构大致如下：*/ &lt;main&gt; &lt;aside class=&quot;left&quot;&gt;&lt;/aside&gt; &lt;aside class=&quot;right&quot;&gt;&lt;/aside&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;/main&gt; /* 流体布局 */ .left &#123; float: left; &#125; .right &#123; float: right; &#125; .content &#123; margin-left: 200px; margin-right: 160px; &#125;/* BFC布局 */ .left &#123; float: left; &#125; .right &#123; float: right; &#125; .content &#123; overflow: hidden; &#125; 三栏平分布局12345678910111213141516171819202122考查box-sizing属性&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; #main&#123; display: flex; &#125; #left&#123;width:100%;display:inline-block;flex:1;box-sizing:border-box&#125; #center&#123;width:100%;display:inline-block;flex:1;box-sizing:border-box&#125; #right&#123;width:100%;display:inline-block;flex:1;box-sizing:border-box&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;main&quot;&gt; &lt;div id=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div id=&quot;center&quot;&gt;center&lt;/div&gt; &lt;div id=&quot;right&quot;&gt;right&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 手写清除浮动的几种方式1234567891011121314方法一：添加空div标签 clear:both方法二：父级标签定义伪类after.float-div::after&#123; display: block; clear: both; content: &apos;&apos;; height: 0px; &#125;上一级父元素：zoom：1；//解决IE67兼容问题方法三：父级标签overflow:hidden .float-div&#123; overflow:hidden; &#125; Meta标签的使用123456789101112131415161718192021222324252627282930meta标签的使用meta标签共有两个属性：http-equiv和name;name属性 name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。其中name属性主要有以下几种参数:Keywords(关键字)举例：＜meta name =&quot;keywords&quot; content=&quot;science, education,culture,politics,ecnomics，relationships, entertaiment, human&quot;＞&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;http-equiv属性 http-equiv顾名思义，相当于http协议中文件头的作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content。其中http-equiv属性主要有以下几种参数：content-Type(显示字符集的设定)用法：＜meta http-equiv=&quot;content-Type&quot; content=&quot;text/html; charset=gb2312&quot;＞Expires(期限)用法：＜meta http-equiv=&quot;expires&quot; content=&quot;Fri, 12 Jan 2001 18:18:18 GMT&quot;＞注意：必须使用GMT的时间格式。Pragma(cache模式)说明：禁止浏览器从本地计算机的缓存中访问页面内容。用法：＜meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;＞Refresh(刷新)说明：自动刷新并指向新页面。用法：＜meta http-equiv=&quot;Refresh&quot; content=&quot;2; URL=http://www.root.net&quot;＞注意：其中的2是指停留2秒钟后自动刷新到URL网址。Set-Cookie(cookie设定)说明：设置cookie, 如果网页过期，那么存盘的cookie将被删除。用法：＜meta http-equiv=&quot;Set-Cookie&quot; content=&quot;cookievalue=xxx; expires=Friday, 12-Jan-2001 18:18:18 GMT； path=/&quot;＞注意：必须使用GMT的时间格式。Window-target(显示窗口的设定)说明：强制页面在当前窗口以独立页面显示。用法：＜meta http-equiv=&quot;Window-target&quot; content=&quot;_top&quot;＞注意：用来防止别人在框架里调用自己的页面。 媒体查询1234567891011121314@media screen and (min-width:600px) &#123; nav &#123; float: left; width: 25%; &#125; section &#123; margin-left: 25%; &#125;&#125;@media screen and (max-width:599px) &#123; nav li &#123; display: inline; &#125;&#125;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[求职路之混沌初开]]></title>
    <url>%2F2017%2F10%2F20%2F%E6%B1%82%E8%81%8C%E8%B7%AF%E4%B9%8B%E6%B7%B7%E6%B2%8C%E5%88%9D%E5%BC%80%2F</url>
    <content type="text"><![CDATA[半个月前就想写一下总结，但是一直没有动笔，因为找工作的过程中一直没有心情写东西。大脑中的那些记忆碎片也不想对外倾诉，一直混沌下去。具体悲惨遭遇我就不详细说了，由我一个半月的求职日记为证，这里我就敞开心扉说说这些日子的体会吧。 这二个多月所遭遇的种种其实在大一的时候我基本上就预感到过，但任凭自己野蛮生长。不见棺材不掉泪，最终自证预言，多走了一段曲折之路。但是现在反而觉得没什么不好，曲折的道路走的更长，体验更多，但时间也更久；而笔直大道呢，花的时间更少，但体验就没那么丰富了。我不能说那个更好，因为有些人的人生像赛车跑道，有些更像是一次旅程，有些像是默默无闻的赶路，一切由着你的性子来。 真正想明白了，就不会慌乱和焦虑。 找工作的之前我一直觉得自己把这些都看的很透彻：“一切都只是开始，人生是场马拉松，慢即是快，笑到最后才是赢家。”再糟糕又能怎么样呢？我以为我不会在乎这么多，但现在回过头看，我还是被自己的情绪绑架了，甚至那时有点迷失。毕竟学了三年，怎么能徒劳呢？同学、老师、家长，各种压力，我没法改变现状，可能是继续准备，但更多的是胡思乱想，或者通过音乐、电影来逃避（但也有帮助，我清楚记得看到最后一段，我忍不住泪流满面，真的太悲壮了，我从电影中看到了自己），连脏话口头语都多了起来。怎么变成这个样子呢，我不是想明白了吗？其实任何事都是没法想明白的，只能是想通了，（我不是抠字眼，我自己是这样理解的）真正想明白是一种体验后的结果，当然既可以是思想的实验，也可以是真实的体验。而我以为自己明白了，其实只是一个意识上的感知，于是反复入坑，最终靠的是自己的元认知才爬了出来。你可能觉得那时候我堕落了，但是其实堕落才能让人学会珍惜。 谢谢你，朋友 以前对朋友这个概念，我特不以为然，但是这次经历居然改变我从小到大对朋友的认知。你有没有想过，为什么军人们叫生死战友，因为不经历生死就很难体会到战友之情的存在，正所谓患难见真情。同样，在这段艰苦的日子里，多亏了各个地方朋友的关心和鼓励，虽然没有到生死离别的地步，但是这种东西在这个年代很珍贵。我过得不好，我也希望你能过得好；我过得不好，同样也希望你能过得好。珍重，我的朋友! 运气 关于这个话题，我不想谈太多。我是相信运气存在的，但是我知道那是难以预测的时间和空间组合的一个随机概率事件。小概率事件我是不会主动去碰的，这种东西不可以追求，只能得之我幸，失之我命。但是一些不经意遇到的人可能改变你我的一生，《三体》里面叶文洁和1379号监听员这种类似的普通人在我们的人生中一定是存在的，但是大部分都是贵人，而我们能做的就是好好珍惜。而关于坏运气，就比如说你拿到了一副烂牌或者一把好牌被你打成了烂牌，这个时候最重要的事就是止损，尽力把你的烂牌打好。而好多人这个时候就容易本末倒置。 究竟是该始终笃信？还是灵活转变？ 答案是视情况而定。对于梦想、原则我觉得应该120%的相信，而对于正在学习实践方面，应该灵活转变策略，多个角度反复尝试。创新尤其如此，必须要突破障碍，走出新的道路。 顺序和过程 我觉得这是一个非常有趣的话题，好多人会掉进类似的坑。举个例子：实习找工作的初期，自己面试经验不，知识储备不够完整，这个时候我以为自己可以了，然后就用了一些有限的名企面试名额，结果可想而知，既受到了打击，有浪费一个宝贵的机会。我用一个数学的例子解释一下这个问题：有两个相同规律的算式：0*1+0*100+1000和0*1000+0*100+1（临时想到的），两个算式的计算过程相同，但是数字1、100、1000的顺序不同，结果就造成了1:1000的差距。是不是有点可怕，但是生活中就是有那么多人做着这样的事。 放弃人生太多事我们是没法坚持的，这并不是我们懒惰、不思进取，而是我们必须舍弃一些东西。所谓的坚持靠的并不是什么大决心、大毅力，而是自然而然的做下来了， 而放弃的原因反而是你最初的壮志和激情。 零零碎碎的说了挺多了，真不敢相信又瞎想了这么多。年轻人，少喝鸡汤多做事吧，愿不忘初心，继续前进，活在未来，俯瞰人生。]]></content>
      <categories>
        <category>个人成长</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FIddler使用场景]]></title>
    <url>%2F2017%2F09%2F29%2FFIddler%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%2F</url>
    <content type="text"><![CDATA[开发环境host配置 通常情况下，配置host需改系统文件，很不方便；在多个开发环境下切换很低效。Fidder提供了相对高效的host配置方法。 前后端接口调试 通常情况下，调试前后端接口需要真实的环境、大量的假数据、写JavaScript代码。而Fiddler只需一个UI界面进行配置即可。 线上bugfix Fiddler可将发布文件代理到本地，快速定位线上bug。 性能分析和优化 Fiddler会提供请求的实际图，清晰明了网站需优化的部分。 抓包 Fiddler工具非常方便地捕获HTTP Request和HTTP Response 相关链接：一篇介绍比较全面的博客]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法优化]]></title>
    <url>%2F2017%2F09%2F12%2F%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[思路 遍历常见的算法思路 遍历常见的数据结构 空间和时间的交换（哈希表） 预处理信息（排序） 在瓶颈处寻找答案（O(nlogn)+O(n^2)；O(n^3)） 实际编写问题 极端条件的判断 数组为空？字符串为空？数量为0？指针为null？ 代码规范（变量名） 模块化，复用性 解密时间复杂度大O O(nlogn+n) = O(nlogn) O(nlogn+n^2) = O(n^2) O(AlogA+B)不变 对邻接表实现的图进行遍历：时间复杂度：O(V+E) 数据规模的概念 前提：如果想在1s之内解决问题： O(n^2)的算法可以处理大约10^4级别的数据; O(n)的算法可以处理大约10^8级别的数据; O(nlogn)的算法可以处理大约10^7级别的数据 空间复杂度 多开一个辅助的数组：O(n); 多开一个辅助的二维数组：O(n^2); 多开常数空间：O(1);注意：递归的调用是有空间代价的，递归调用的深度就是空间的复杂度。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>优化</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据加密技术概述]]></title>
    <url>%2F2017%2F08%2F25%2F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[数据加密技术的包括这样几方面的内容：数据加密、数据解密、数字签名、签名识别以及数字证明等。 数据加密模型组成 明文：准备加密的文本，称为明文P密文：加密后的文本，称为密文Y加密（解密）算法：用于实现从明文（密文）到密文（明文）转换的公式、规则或程序密钥K：密钥是加密和解密算法中的关键参数 在密码学中，把设计密码的技术成为密码编码，把破译密码的技术称为密码分析。密码编码和密码分析合起来称为密码学。在加密系统中，算法是相对稳定的。为了加密数据的安全性，应经常改变密钥，例如，在每加密一个新信息时改变密钥，或每天、甚至每小时改变一次密钥。 加密算法类型 按其对称性分类(1)对称加密算法在这种方式中，加密和解密往往使用相同的密钥；或者在知道了加密密钥Ke后，就很容易推导出解密密钥Kd。该算法的安全性在于双方都能妥善地保护密钥，因而把这种算法称为保密密钥算法。该算法优点是加密速度快，但密钥分配与管理复杂。(2)非对称加密算法这种方式的加密密钥Ke和解密密钥Kd不同，而且难以从Ke推导出Kd来。可以将其中的一个密钥公开成为公开密钥，因而又称为公开密钥算法。用公开密钥加密后，能用另一把专用的密钥解密。该算法的优点是密钥管理简单，但加密算法复杂。 按所变换明文的单位分类(1)序列加密算法：把明文看做连续的比特流或字符流，逐个转换成密文。这种算法可用于对明文进行实时加密。(2)分组加密算法：将明文P划分成多个固定长度的比特分组，然后在密钥控制下，每次变换一个明文分组。最著名的DES算法便是以64位为一个分组进行加密的。 基本加密方法1.易位法 按照一定的规则，重新安排明文中的比特或字符的顺序来形成密文，而字符本身保持不变。 2.置换法 按照一定的规则，用一个字符去置换（替代）另一个字符来形成密文，比如凯撒密码。 现代加密技术则采用十分复杂的算法，将易位法和置换法交替使用多次而形成乘积密码。 对称加密和非对称加密1.对称加密算法最具代表性的对称加密算法是数据加密标准DES。在DES所使用的的密钥长度为64位，它由两部分组成，一部分是实际密钥，占56位；另一部分是8位奇偶校验位。DES属于分组加密算法，它将明文按64位一组分成若干个明文组，每次利用56位密钥对64位的二进制明文数据进行加密，产生64位密文数据。 非对称加密算法非对称加密算法又称为公开密钥算法，在公开密钥体制中，最著名的是RSA体制，被ISO推荐为公开密钥数据加密标准。 对比由于对称加密算法和非对称加密算法各有优缺点，即非对称加密算法比对称加密算法处理速度慢，但密钥管理简单，因而在当前许多新的安全协议中，都同时应用了这两种加密技术。一种常用的方法是利用公开密钥技术传递对称密码，而用对称密钥技术来对实际传输的数据进行加密和解密。例如，由发送者先产生一个随机数（对称密钥），用它来对要传送的数据进行加密；然后再由接收者的公开密钥对对称密钥进行加密。接收者收到数据后，先用私用密钥对对对称密钥进行解密，然后再用对称密钥对所收到的数据进行解密。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>数据加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据浪潮下的前端工程师]]></title>
    <url>%2F2017%2F08%2F21%2F%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B5%AA%E6%BD%AE%E4%B8%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%88%E7%9F%A5%E4%B9%8Elive%EF%BC%89%2F</url>
    <content type="text"><![CDATA[可视化工作中的产品常会用到一些图表，推荐一个antv的网站，帮助我们理解不同图表的使用。 大数据和前端的结合点狭义上来说是数据可视化，但不应该这么理解，这种思维方式是需要转变的。关于D3，highChart，Echart的优缺点这里有一个有趣的说法，D3就像是面粉，highChart，Echart就是不同的面条，但如果我想要饺子，只有D3能给。一个预测 未来的智能交互可能会使所谓的前端页面越来越少]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛阳行——暑假创业夏令营]]></title>
    <url>%2F2017%2F07%2F14%2F%E6%B4%9B%E9%98%B3%E8%A1%8C%E2%80%94%E2%80%94%E6%9A%91%E5%81%87%E5%88%9B%E4%B8%9A%E5%A4%8F%E4%BB%A4%E8%90%A5%2F</url>
    <content type="text"><![CDATA[首乘高铁去年第一次坐火车，今年第一次坐上了高铁，感觉真的超快啊，不知道你们什么感觉，但对我来说是延长了生命，不知道将来坐飞机是不是更爽。 第一天上午在超大的表演厅举行开幕式，三位专家针对BP和创业等话题做了重要的讲话，确实改变了我对演讲、BP、创业团队的一些看法。这应是我最大的收获了。 下午参赛小组项目演示，13进2， 我全程看完了每个团队的展示，确实发现了很多很有创意的项目，其中有一个项目与我们正在做的云印项目非常相似，让我尤为欣喜。最终我们很幸运的拿到了第二天进行正式路演的名额。 第二天上午我们协助团队主讲人反复练习稿子、修改PPT，中午12点接到临时通知，火速赶往会场参加路演。我们是最后一个上场，我观看了几个路演项目，确实很震撼，很有趣，最终我们圆满完成了任务，能走到这步，实属不易，作为团队一员还是很自豪的。 洛阳印象相比新乡，洛阳的楼都很高，路也很宽，基础设施相对发达，消费水平感觉不算太高，适宜工作和生活。期间没有专门出去玩，尝了不是很正宗的洛阳牡丹燕菜、锅贴，可惜时间不够，没有尝试其他的美食。回来时在泉舜购物中心逛了几个小时，里面极其繁华，当时感叹这其实也是人与人的差别啊，连购物的体验都是千差万别的，我不由得想到了未来。 回顾从小我就听说过“夏令营”这种感觉挺高雅的活动，心里颇为向往，很幸运在大学的最后我经历了一次这样的活动。此次参加夏令营的几个人原本是四个团队的代表，最终以其中一个团队的项目为主，我们几个代表重新组成了一个团队参与此次夏令营活动，这确实很出乎我的意料。不过我还是挺喜欢这个Team的，两天共同奋战中虽有争执，但友情不变，从中我确实体会到了团队合作中的智慧。这两天虽然没有学习，带的Kindle也没有看，但是眼界宽了，心境不同了，我能感受到这种潜移默化。同时我也遇见了一群有趣的人，在此特别感谢一路照顾我们的胡斌大哥。总之，这次旅程非常愉快。]]></content>
      <categories>
        <category>个人成长</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十佳读者发言稿]]></title>
    <url>%2F2017%2F06%2F30%2F%E5%8D%81%E4%BD%B3%E8%AF%BB%E8%80%85%E5%8F%91%E8%A8%80%E7%A8%BF%2F</url>
    <content type="text"><![CDATA[尊敬的各位领导、老师，亲爱的同学们：大家（下午／晚上）好！我是来自信息工程学院的牛燕尾。很荣幸能够作为优秀读者的代表发言，分享我个人在大学近三年以来的读书心得和体会。 首先，作为一名读者，我像在座的你们一样由衷的喜欢我们的图书馆。我现在大三，转眼就要实习工作了。回顾大学生涯，我不由自主地感概：“知识改变命运”，这句话小学的时候老师就跟我说过，但一直把它当作一句口号。但现在我是发自内心的体会到了。 我现在还清楚地记得2014年时，青涩懵懂的我进入大学的校门，第一天我就去了我梦想中的知识殿堂——图书馆。从外面看真的像一本巍峨耸立的古书，走了进去，我被眼前的情景震撼了，到处都是书，到处都是沉浸于书海的人……；我穿梭在书架旁，看到的那一本本让我怦然心动的书籍，无比的满足。那时，图书馆的一切都让我那颗单纯、平静的心填满希望与追求。 当今的时代是知识经济、数字化信息化的时代。知识更新、知识拓展、知识创新，给我们提出了迫切的学习任务。每一个人都必须坚持终身学习、接受终身教育。读书是终生教育最好的一种践行方式。从阅读中，我们不仅在与高尚人物的灵魂对话，更能见识到比眼前的世界更深邃、更辽阔的另一个世界。 阅读的目的是什么，很明显是改变生活，而生活应该是丰富多彩的。虽然我是一名计算机专业的学生，但是我在阅读上我从来没有局限在计算机。经济、历史、文学、心理、社会科学等方面我都有所涉猎，我明白读书必须要广，天文地理人文科技，都去大胆触碰，把自己放在大格局里，是读书甚至做人最好的着眼点。下面我想向大家分享一下读书过程中我的一些个人经验。 (一)读书和上学很多老人看见许久未见的孩子会问一句，在哪读书呢？于是我们就会回答各种地点或各种大学的校名回答他。而仔细想想，你在读书的时候，读过几本书，书名叫什么、哪些主人翁，还记得吗？是不是读过的书大多数都是课本？那么上初中的第一篇课文是什么？大学专业课的第一章是什么？还记得吗？所以你看，读书，越来越和上学区分开。不再是一个混合的概念，读书和上学分的那么开，真的不是什么好事。上学的好处是，走出了以父母为轴心、家人为主要环境的地方，去拓宽视野。遇到一群正当好年纪的人，与他们交流理想与未来。而读书，是从内向外的改变心性、改变气质、改变整个人的精气神。所以，如果读书和上学能融为一体，视野拓宽了、朋友交到了、品德气质都提升了，多好的事。 (二)学会检索信息，充分利用数字资源熟悉图书馆的文献检索，了解文献检索的基本理论、检索途径、语言和方法。有触类旁通、举一反三的检索能力。比如如何快速找到一本书在图书馆的具体位置，如何快速准确的查找到一篇专业论文、如何利用搜素引擎准确查找相关信息，这些都是这个时代每一个人都应该掌握的重要技能。我觉得在资源利用方面大部分读者还停留在纸质资源的层面，忽略了数字资源。图书馆有大量的电子图书、电子期刊、二次文献数据库、其他数据库，我们可以查找到最新、最权威的著作。这些资源不管是对个人考研升学还是一些科研活动都有很大帮助。 (三)实践出真知，阅读＋写作图书馆以其丰富的馆藏文献和网络信息为学生构筑了综合的知识结构。我们应该把理论转化为实践，更多地应用于我们的专业和生活。而写作就是很好的一种方式，要想提升自己的阅读理解能力，最好的工具就是写作，也就是像作者一样阅读。因为阅读是输入，而写作是输出，写作是自己阅读后的一种思考和检验，我自己很喜欢写东西，已经写了好几万字，切身感受到写作是阅读的一种升华和实践。这里提到的“写作能力”，不是写小说的能力，不是写诗歌的能力，不是写剧本的能力，也不是写散文的能力，只是写作能力中的最基本的一种—写出简洁、有效、准确、朴素、具体的说明性和说理性文章的能力。比如读书笔记、读后感就是一种很好的写作形式。 (四)建立线下读书会活动一本好书值得所有的人去读，我觉得读书会是一种很好的沟通与交流的方式。大学里面有各种各样的社团，但是为什么就不能有一群人来共同读书，碰撞出思想的火花呢？一群人读书比一个人读书有意思得多。读书会可以以解决一个人生问题为出发点，精选几本与问题相关的好书。每一个参与者私下阅读一本书并做笔记，通过总结、分享、讨论，和小组成员共同创作独一无二的集体知识结晶，从书中找到问题解决思路。我觉得这真的很棒。 (五)关于碎片化阅读今天很多人沉溺于碎片化阅读，但纸质图书和资源的需求始终存在，对于真正热爱读书的人来说，书籍、期刊等传统纸媒给人精神世界带来的享受与体验是无可替代的，碎片化阅读不可能完成深度阅读。这里有一个很有意思的比喻：碎片阅读就像是在捡硬币，你见过捡硬币捡成百万富翁的吗？所以永远不要放弃读书。以上是我的一些个人的分享，希望对大家有所启发。感谢图书馆能够举办这样的活动让我们共同交流，阅读没有终点，希望我们一直走在阅读的路上。 我的发言到此结束，谢谢大家^_^！]]></content>
      <categories>
        <category>个人成长</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[商业计划书撰写套路]]></title>
    <url>%2F2017%2F05%2F22%2F%E5%95%86%E4%B8%9A%E8%AE%A1%E5%88%92%E4%B9%A6%E6%92%B0%E5%86%99%E5%A5%97%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[什么是商业计划书 商业计划书是融资方吸引投资者，全方位展示项目商业蓝图，以供投资者分析决策的报告。它包含投资者感兴趣的重要信息，从企业成长经历，产品服务，商业模式、战略规划、市场营销，管理团队、股权结构，经济效益到融资方案。商业计划书是用承诺来换取投资人的支票。 商业计划书的用途1.项目融资2.寻找合作伙伴 第一部分（1-2页）分析行业背景和现状：why/why Now市场容量 痛点 分析 切入 第二部分（1页）产品链产品功能技术流程 第三部分（6页左右）如何做以及现状解决方案产品用户核心竞争力商业模式i关键业务策略当前成果 第四部分（1-2页）项目团队who？团队规模、能力分工、岗位匹配度、核心竞争优势 第五部分（1页）财务预测与融资计划-how much？财务预估融资计划 投资人从BP中想了解什么？ 你想干什么？（产品、服务） 怎么干？（生产工艺、服务流程） 你的经营团队（人力资源） 消费者群（市场研究） 竞争对手（市场分析） 股权结构（资产情况、股东背景） 营销策略（营销管理） 财务分析（利润点、风险、投资回报周期） 商业计划书的撰写1.基本情况2.管理团队3.产品服务4.商业模式（含盈利模式）5.股权结构6.财务分析7.风险控制8.融资决策 常见问题：1.没有市场分析2.缺少战略定位3.内容凌乱4.太过华丽5.包装太明显6.找不到实质内容7.没有市场分析8.团队不成熟9.假大空10.缺少特色11.粗糙没重点12.没有盈利计划 PPT制作思路1.企业介绍：用一张ppt，说明企业的概括和目标2.商机：用2-3张ppt，陈述尚未解决的问题和为满足的需求3.解决方式：用1-2张ppt，解释企业将如何解决问题或填补需求。4.行业、目标市场和竞争对手：用1-2张ppt，介绍企业即将进入的产业、目标市场以及直接和间接的竞争者，重点陈诉企业如何在目标市场中与现有企业展开竞争，获得丰厚利润。5.创业者团队：用1-2张ppt，简要介绍团队成员的互补优势6.企业盈利前景；用2-3张ppt，简要陈述财务问题，重点强调何时盈利，需要多少资金7.企业现状：用1张ppt，介绍企业现有的投资情况以及所有权结构。]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英语阅读剪枝法]]></title>
    <url>%2F2017%2F05%2F16%2F%E8%8B%B1%E8%AF%AD%E9%98%85%E8%AF%BB%E5%89%AA%E6%9E%9D%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Rule1：剪掉句子的枝杈”介词＋名词／代词“1.基本介词＋名词剪枝英语在人生中很重要！English is important in life2.需要注意的介词＋名词剪枝我喜欢像古驰一样的品牌产品I love brand-name items such as those by Gucci3.“介词＋名词扩充” 剪枝这部电影是我人生中的最佳作品this movie is the best in my life4.“介词＋代词” 剪枝爱情对我来说太难了Love is difficult to me5.“介词＋动名词” 剪枝我停车很困难I had difficulty in parking6.“介词＋名词性从句” 剪枝男人和女人说话的方式有差别There are differences in how men and women talk Rule2：不需要修改，去掉副词的修饰 7.“以ly结尾的副词” 剪枝我非常想见李孝利I desperately want to see Lee Hyo RIl8.“时间副词／需要注意的副词” 剪枝我的老板是很挑剔的！My boss is pretty picky Rule3：剪掉”动词不定式、现在分词、过去分词“，名词马上看出来 9.名词后“动词不定式”剪枝我没有男朋友要见I have no boyfriend to meet10.名词后“现在分词”剪枝你有给你指点的导师吗？Do you have a mentor giving you advice？11.名词后“过去分词”剪枝《星际争霸》是受很多人喜爱的人气游戏Starcraft is a popular game loved by many people Rule4：名词后”关系代／副词＋主语＋谓语“剪枝，长句变短句！ 12.表示人的名词后“who／whose/whom/that…”剪枝他喜欢长发女孩。He likes the girl who has long hair13.表示物的名词后“which／whose(＝of which)／that”剪枝大多数人喜欢谷歌，因为它能提供大量信息！Most people like Google，which provides much information14.名词后“关系副词where／when／why…”剪枝我知道一个可以看电影的很棒的咖啡馆。I know a great café where we can watch movies Rule5：”连词＋主语＋谓语“，先剪枝后思考！ 15.“基本连词＋主语＋谓语”剪枝虽然憨豆先生长得不帅，但是我喜欢他。Although Mr.Bean is not handsome，I love him16.“需要注意的连词＋主语＋谓语” 剪枝你读到这封信的时候，我应该到美国了。By the time you read the letter，I will be in America Rule6：”逗号前后四种形式“都挑出来，就是阅读高手了 17.“现在分词“ 剪枝生活在英国，我结交了一些好朋友。Living in the UK，I made some good friends。18.“过去分词“ 剪枝被用英语提问，我紧张。Ask a question （in English），I was nervous19.“动词不定式（to＋动词原形）“ 剪枝如果想吸引女孩，你需要支持她！To attract a girl，you need to support her。20.”主语，&lt;插入语&gt;，谓词“ 剪枝金妍儿，世界最棒的女子花样滑冰运动员，很漂亮！Kim Yu Na，the best female figure skater in the world，is beautiful。]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的大学社团生涯]]></title>
    <url>%2F2017%2F04%2F29%2F%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E7%A4%BE%E5%9B%A2%E7%94%9F%E6%B6%AF%2F</url>
    <content type="text"><![CDATA[亲爱小伙伴们，CSDN协会靠你们了 此时距离我进入科院的csdn俱乐部差不多一年时间，我去查我的日记，可惜那时还没有开始写。但是我还是能够回忆起大概，所以我想把这段经历以及我的一些所思所感记录下来，算是自己对工作的总结，也希望能给协会的小伙伴们一些参考。说来惭愧，在大学开始时我根本没有加入任何社团。但为什么我后来成了CSDN会长，这里面的事太复杂，我只能简单的说：在一次偶然的机会，我积极主动的去尝试，然后阴差阳错就选上了。但这绝对不是我的初衷，这也不是serendipity（意外惊喜），可以说成是骑虎难下，然后那虎就成了坐骑了。但是往深里去找原因，毫不避讳的讲，其实我当时是冲着一个人去的，本来想做辅助的，没料想成了主力，这一点都不好笑。后来怎么样了，我也不知道后来我经历了什么，有太多遗憾了。 说实话，期间我曾多次萌生辞退的想法，但最后都被自己说服了。接管csdn后，满腔热血，准备大干一场，进行一次彻底的改革。但是毕竟我刚进入，一些内部的机制都不太了解，脸皮又薄，始终不敢迈开大步向前走，所以基本上是按照以前的流程，每周讲讲一些简单的课程而已，没有一点新奇的东西。现在回头看觉得当时自己是怎么了，为什么不大胆去做呢？原因来自很多方面，当时我没有组织好协会干事，我总喜欢什么事情自己来，却忘了我们是一个十几人的团队，我们应该彼此信任和交流，但是平时见面的机会太少了，我只知道平时去讲讲课就可以了，从未关心过干事的成长与进步。我不知道到底是什么阻碍了我，但毕竟我还是一路走了过来。我清楚记得招新时的那一段经历，那几张大字报到现在我都感觉那真是急中生智，可惜没留下照片。回想这一年我也算是尽心尽力了，但是在做事方法上确实存在很多问题，所以结果并不太理想，只能算达到我目标的30%。现在回头看，就觉得当初太傻，想做的事没做好。但我庆幸现在明白了，脑子很清晰，我深深体会到了什么是成长。 好了，回忆到此为止。来说说我眼中未来的csdn俱乐部。首先我不具体说csdn俱乐部，我这里说的其实可以理解为所有的社团，因为根本上完全是想通的。我为什么大学不加入的社团？就是我一直觉得大学的社团挺坑人的，和我想想中的差的有十万八千里，在这种大环境下想做好一个社团确实不容易，这对我来说也算找到了一点安慰，但绝不是借口，因为其实是可以做的更好的。 在我看来，社团作为一个组织，它的使命是为了帮助我们创造价值而不是为了营造一种虚假的大学课外氛围。有人把他比作大学的第二课堂，我觉得很恰当，但是现实情况并非如此。那我们csdn为例，我们一开始就给自己束缚了手脚，以前学长是怎么怎么做的，你也就跟着做了。每一届讲的都是那几节课，只是一些花拳绣腿，完全没有授人以渔，其实那些东西一节课就能讲完的，因为只需要教他方法、如何百度就行了。我自己经历了一堂课就只有十来个人听的尴尬场面，因为当时我还存在错误的认知。所以如果现在让我去讲课，我再也不会教那些东西了。 我觉得我们不应该给自己定位只教计算机相关的知识，因为社团的目的是帮助每一个想进步的成员成长，帮助他们创造价值，所以不应该局限于形式，在这上面要不择手段。我最近受到启发，感觉可以在社团内部启动一个创业小组，由社团出资，每个参与者作为股东进行一次创业，摆地摊是一种非常好的形式，只要稍微使用一点营销技巧，赚钱是相当轻松的，这里谈到钱，谈钱一点都不俗气，靠自己的本事赚钱是多么自豪的一件事 。何况赚钱不是我们的目的，那只是顺带的。你一定要明白，我们每个人其实就是一个产品，你不要想着如何赚钱，而是应该专注于提高你的价值，让自己变得更值钱。在这种创业活动中每一位成员都会体会到共同做成一件事的那种收获，你会看一个idea或者一个项目是怎么样一点点成长起来的或者夭折的，不管成功与否，你都能亲自见证，这种经历我相信是你在任何地方都学不到的。 我的第二个想法是关于读书的，今天6月份我有幸成为校十佳读者，本来是要作为代表发言的，稿子我都写好了，但是因为各种原因报告会到现在也没举行，已经快要放假了，我也要出去找工作，也就没机会去了。在那篇稿子十佳读者发言稿 ，我当时有一个想法： 建立线下读书会活动一本好书值得所有的人去读，我觉得读书会是一种很好的沟通与交流的方式。大学里面有各种各样的社团，但是为什么就不能有一群人来共同读书，碰撞出思想的火花呢？一群人读书比一个人读书有意思得多。读书会可以以解决一个人生问题为出发点，精选几本与问题相关的好书。每一个参与者私下阅读一本书并做笔记，通过总结、分享、讨论，和小组成员共同创作独一无二的集体知识结晶，从书中找到问题解决思路。我觉得这真的很棒。 我希望我们社团应该是一个有特色的、有价值、真正服务于大学生的一个平台。会长今年仍然没有竞选，不过到时候我希望你们都试试，我有时候虽然说后悔当选会长，但这段确实对我帮助很大，其实我可以做的更好的，只是那时候太不懂事而已。最终无论是谁选上了，我都希望你们都能共同努力，毕竟社团是大家的。做事最怕的就是人心涣散，心散了一切都完了。 关于经费，上次申请的采购费用由于数目较大没有完全审批，现在协会账号应该留下了将近2000供你们下学期使用。我现在只有几百块现金，报过上次活动的经费之后，也所剩不多了。所以采购的事你们自己商量吧，关于今后经费的使用，你们自己讨论，不过我可以给你们一个建议，那就是付出的人不应该吃亏，比如每一次的社联通知、活动、讲课……都应该有奖励机制存在的，我那时候胆子小，不懂事，没能为大家争取福利，当时大家的态度我也都能理解，我亲力亲为做的那些事也属于累死活该，所以我希望你们不要和当初的我一样。 这段时间一直有留下创业的想法——我为什么选择创业，但是具体我会不会真的留下还不确定，我觉得大城市可能更适合我。如果我留下创业的话，我也一定会通知你们，到时候谁有兴趣说不定也可以加入我们的团队。暑假我会把协会的所有物品整理打包，寄放到零号楼910，到时候开学你们过来取就行了。 有时候我们不需要学习别人成功的经验，相反我们应该吸取他们失败的教训。因为成功的方法就是减少犯错的几率，所以有时候我总是用概率论的方式去思考问题。马上就要各奔东西，如果我们有幸毕业后还能遇见，那我一定能一眼认出你。道一声：还好吗，朋友？]]></content>
      <categories>
        <category>个人成长</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目答辩心得]]></title>
    <url>%2F2017%2F04%2F12%2F%E9%A1%B9%E7%9B%AE%E7%AD%94%E8%BE%A9%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[常见汇报思路：1.起源——优势——未来2.自我介绍——公司介绍——盈利模式——优势——未来计划 语言：简洁、直接，通俗，主体必须明确 表达：咬字清晰、声音洪亮、语速不要过快。 PPT和表达不要相同，但主题目标是一致的。 PPT动画要做就要做的漂亮，不然就不要用。 PPT内容：图片、文字提纲、数据 汇报前一定要有文字稿的汇报提纲。 另一个思路：PPT部分内容用视屏形式展示 问题预备应答：事先准备好评委可能会问到的问题的应答。 展现实力时，要用成果和产品效果证明。]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的学习方法论]]></title>
    <url>%2F2017%2F04%2F02%2F%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[价值知识改变命运这句话从小我就耳熟能详，可是到了二十二岁的时候我才真正笃信这个道理。一开始我也知道那是一个不争的事实，但是仿佛脑子里一直有个家伙小声低语：“”那又怎样呢？“，他彻底的一票否决了。后来那个家伙有一天经人点化终于相信了，在经过一次次的跌倒与爬起，他开始彻底的笃信。 所以我从不知道——知道——懂得——相信——笃信，这是一个神奇的过程。知识真正成了我生活中的刚需，就像每天吃饭一样，知识变成了我精神的食粮，成了我的刚需，这也让我成为了终生学习者。 时间为什说我成为了一名终生学习者呢？因为在时间上我的学习期限是一生。过了十八岁记忆力就会减退，我不在乎，我可以多花点时间，我可以找到适合自己的方法，这丝毫不应该影响我。到了大学就轻松了（意思是到了大学就不用那么刻苦的学习了），说这话的高中老师其实挺不容易的，谁也不愿意说善意的谎言。在我看来学会自学的机会来了，怎么可能停下来呢？大学毕业工作了，终于自由了。NO，真正自学的时候才刚刚开始。 空间我给学校的简单定义是：学校就是学习的地方。但我上的学校特别大，人特别多，学校的名字叫：world，学校人数70多亿。在这样的学校我可以学习到一切我想学习的东西，生活真的无比精彩，。 自学&amp;社交自学很重要，这句话说多少遍都不过分。但是一定要知道从本质上看一切的学习都含有社交，从最基本的看书你的每一次阅读就是和古今圣贤的一次对话。所以自学跟闭门造车没有半毛钱关系。 第一名与第二名的区别从小学到大学你会发现一个有趣的现象：班里第一名学的很轻松，一直保持NO.1，甚至把后边的人甩的远远的；第二名就学的非常刻苦，典型的学习狂人，我们觉得那是他应有的收获。仔细观察你就会发现，第一名和第二名的学习方法有着天壤之别。第一名遇到总是善于虚心请教老师，别的同学总是喜欢向他请教问题，而他也总是乐此不疲的解答。这相当于他把所有同学的疑问或错误遍历了一遍，所以学习路上畅行无阻，永远是那只领头羊；第二名就不一样了，第二名通常喜欢单枪匹马，觉得学习就是一种竞争，必须刻苦学习不断追赶，自己掉了那么多的坑岂能便宜了别人，这也造就他第二名的身份。有时候真的挺悲哀的。之所以说这个例子我想说明的是一个特别简单的道理：教是最好的学。 自我践行是最好的学习方法 我的座右铭就是Just do it，可见它对我的重要性。 拆分拆分再拆分学习是一个积累的过程，同样细化到每一个点上也是有一个特别重要的过程——拆分拆分再拆分的过程。 打log是进步最快的方法程序员经常要写错误日志，防止二次掉坑。普通人更应该如此，规避错误是进步最快的方式，只要你不犯错你就你就一直走在前进的路上。但是大部分人都是连续掉进同一个坑，摔得头破血流，才明白过来。有时候是需要一定的试错成本，但是一旦成本大于收益就得不偿失了。 向学习他人我们最小到大全都是通过可见的信息进行学习，说到向人学习我们可能就懵逼了。究竟如何向一个牛逼的人学习？我这里提供一种思路：心理表征的学习。所谓向他人学习，其实是应该学习他的心理表征，即那一刻他是怎么想的，他为什么那样思考，我为什就没有想到呢？我是不是可以按照这种思路去思考呢？这些问题的答案就是你快速学习他人的一个快速的过程。 在人群中识别你一辈子的战友，找到你的精神导师学习路上有人陪伴是幸福的，那是你一辈子的战友。我一直觉得每个人这一辈子都有那么一位人生的导师，他指引着我们沿着正确的方向不断前进。 关于学习我想说：知道就要做到，虽然不见得每一步都做得很好，但每天都在做，每天都在折腾，每天都或许有一些进步，假以时日，变产生了大不同。你会发现，繁星就在脚下。尽己所能，我所能者尽善尽美，我所不能者虚怀若谷。希望你没有原地踏步，反正，落后早晚挨打。]]></content>
  </entry>
  <entry>
    <title><![CDATA[品牌的秘密]]></title>
    <url>%2F2017%2F03%2F24%2F%E5%93%81%E7%89%8C%E7%9A%84%E7%A7%98%E5%AF%86%2F</url>
    <content type="text"><![CDATA[品牌——本质——三观——策略方法——技巧&amp;&amp;资源产品负责更好用品牌负责卖更贵市场负责卖更多 品牌的五个阶段：发现（出场）——认识（建立关系）——记住（存在感）——喜欢（体现特质）——忘不了（迭代更新） 出场：各个环节都要精心设计，切勿促销，姿态不要过于谦卑；认识：建构需求关系，定位清晰，快速找到意中人。注：不要刷屏，易出现认知疲劳，只需要构建第一印象。记住：开始刷存在感，通过事件凸显关键词，形成自己的视觉锤。（远离缺乏热情的人，建立Fans的社群，培养忠实用户。）喜欢：无特质不迷人，体现稀缺性。不要迎合用户，而是要主导用户。（苹果、特斯拉、极客精神）忘不了：提高用户忠诚度，更新迭代，反复折腾。 品牌内涵：内容+渠道+时机1.内容要打动人心（真诚——先打动自己）2.渠道（想法设法）流量：哪里人多哪里就是流量，避开既定流量，找到渠道创新。3.时机（要恰逢其时） 找到引发思考的东西，而不是拿来主义的那些结论。]]></content>
  </entry>
  <entry>
    <title><![CDATA[英文电影学英语]]></title>
    <url>%2F2017%2F03%2F19%2F%E8%8B%B1%E6%96%87%E7%94%B5%E5%BD%B1%E5%AD%A6%E8%8B%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[初级（三遍法看英文电影）第一遍：尽量看懂剧情，了解故事。第二遍：随时按暂停键，查询生词，跟着句子、模仿语气。第三遍：遮住字幕，看看是否听得懂。听力好的人，口语一定也不差。 中高级1.一边看一边暂停2.一边听一边记笔记3.一边看一边模仿4.看完就复述 为什么看英文动画片？1.语速慢、适合模仿2.情节正能量，没有脏话 分享片单动画电影：《Toy story》玩具总动员《Zootopia》疯狂动物城《Frozen》冰雪奇缘《Wall E》机器人总动员《King of Lion》狮子王《Kongfu Panda》功夫熊猫《Cars》汽车总动员《Despicable Me》卑鄙的我《Wreck in Ralph》无敌破坏王《Monster University》怪兽大学《The Croods》疯狂原始人《Up》飞屋环游记1.美国文化《美国往事》《American Beauty》2.美国历史 《阿甘正传》 《教父》3.美英法体系《十二公民》《十二怒汉》4.关于人生《肖申克的救赎》《楚门的世界》《飞越疯人院》《控方证人》5.美国的城市《Chicago》《Washington》《Hawaii》《LA》6.美国教育《心灵捕手》《死亡诗社》7.美国医疗《You dont know Jack》8.宗教《七宗罪》《My name is Khan》9.战争《辛德勒的名单》《血战钢锯岭》《拯救大兵瑞恩》10.美国歧视《为奴十二年》《crash》11.纪实类《spotlight（聚焦）》《部落》《marathon（马拉松:爱国者日爆炸案）》12.英剧《Black Mirror》《夏洛克福尔摩斯》]]></content>
  </entry>
  <entry>
    <title><![CDATA[让不断改变成为可能]]></title>
    <url>%2F2017%2F03%2F05%2F%E8%AE%A9%E4%B8%8D%E6%96%AD%E6%94%B9%E5%8F%98%E6%88%90%E4%B8%BA%E5%8F%AF%E8%83%BD%2F</url>
    <content type="text"><![CDATA[1.改变很难 我一直是一个渴望改变的人，因为我知道那会让我变得越来越好。但是我也发现刻意逼自己去改变往往没有什么效果。因为改变往往是偶然的，就好像蝴蝶效应一样细思极恐，但也有着多米诺骨牌一样连带和顺畅。 2.一次改变的背后必须存在着积存已久的矛盾你一定有过这样的体验：你每一次改变好像都是由于某件事情的激发。与女朋友分手、亲人离开、自己生了一场大病…..然后明白了一些东西，自己改变了一些思想。我深深记得扎克伯格因为被女朋友甩了然后当晚写下了让哈佛服务器崩溃的网站，成为了后来Facebook诞生的导火索。 3.找出矛盾，创造改变。如果你每天重复的生活着，这样这种矛盾点就非常少，你根本没有改变的动力起源。所以保持好奇心，去体验千姿百态、酸甜苦辣的生活，创造更多的可能性。在这个过程中，善于发现那些能量点，产生改变，收获成长。]]></content>
  </entry>
  <entry>
    <title><![CDATA[重新制定小组前端学习路线]]></title>
    <url>%2F2017%2F03%2F03%2F%E5%B0%8F%E7%BB%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[前期(集体学习内容)Html5+css3：学习内容：Html51：基础标签的使用2：新增标签和属性css31：CSS语法和样式2：选择器3：盒子模型4：CSS定位5：CSS3新增属性6 动画效果其他：1:兼容性2.代码调试总时间：14天（考核实例：制作一个静态网站）JavaScript学习:学习内容：1：js基础语法2：内置对象常用方法3：DOM操作4：ECMAscript5：JS动画6：DOM、BOM、7：定时器和焦点图总时间：10天（考核实例：编写一个完整小游戏）Jquery+Bootstrap学习：学习内容：1：Jquery基础语法2：常用的选择器和事件3：常用的DOM操作和效果方法4：方法链3：拖拽、变形3：JqueryUI组件4：Ajax 5.bootstrap基本的排版布局及样式的使用（重点学习栅栏和布局的技巧）总时间：（考核实例：用个人编写的简单插件和现有插件结合Bootstrap做一个动态的网页） 后期(前端方向学习内容)Html5+css3高级学习内容：Html5 Canvas绘图 web本地存储 Geolocation API Web Workers、Web WebSocket APIcss3 CSS新特性 CSS3动画 特殊图形绘制 雪碧图、滑动门 媒体查询 响应式设计 自适应布局总时间：（实战：PC端门户网站或移动端电商网站）JavaScript高级:学习内容： 正则表达式 闭包 排序、递归算法 DOM实现原理和深入 原型 函数节流 作用域链 面向对象 封装 常见特效：tab、导航、整页滚动、轮播图、JS制作幻灯片、弹出层、手风琴菜单、瀑布流布局、滚动事件、滚差视图。总时间：（实战：插件封装）进阶学习内容： 熟悉Web开发工作流和MVC/MVVM/MVW框架，学习常用库：Vue.js 了解WeUI Gulp、webpack等前端构建、打包工具 设计模式 前端开发优化 了解ES6 Node.js全栈开发总时间：（要求：做笔记、写博客，用Vue.js开发单页应用，分享自己的学习成果和作品）]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017前端职位要求]]></title>
    <url>%2F2017%2F03%2F03%2F2017%E5%89%8D%E7%AB%AF%E8%81%8C%E4%BD%8D%E8%A6%81%E6%B1%82%2F</url>
    <content type="text"><![CDATA[前端高级工程师 工作经验至少一年 精通HTML5/CSS3，JavaScript，Ajax等Web开发技术；（需要核心掌握并应用的的技术） 熟练掌握前端开发技术(HTML5、JS、JSON、XHTML、CSS3)，了解各项技术的相关标准，并严格按照标准进行开发，熟练使用JQuery框架能与后台开发人员一起编写Ajax交互程序； 熟练掌握至少一种主流的前端应用层框架，例如Angular，React, VUE等； 精通 JavaScript，CSS以及bootstrap等常见前端技术，掌握MVC，OOP编程思想； 熟悉各种浏览器的兼容性调试，具有移动设备调试经验 具有性能优化经验； 熟练使用各种调试、抓包工具，能独立分析、解决和归纳问题 熟悉各种常用设计模式和常用MV*框架 熟悉OOAD，熟悉设计模式，重构； 对Java script 面向对象编程具有深入的了解；至少熟悉目前主流的Java script 库中的一种，如：Jquery,mootools,prototype等，掌握其原理，能独立开发常用组件 熟悉AngularJS，NodeJS，React等框架优先考虑； 有Canvas或SVG 开发经验。 熟练使用PS或FW等图像处理工具 具有至少一门服务器端编程的实战经验，有php开发经验者优先， 熟悉Linux平台，掌握一门后端开发语言（如 Java、PHP 、python 、nodejs） 有smarty或其他模板嵌套者优先。 有 MVVM 或 MVC 模式开发经验的优先 有纯前端渲染工程(即前后端开发分离)经验优先 有良好的前端代码风格，开发时有写单元测试经验优先! 有 Electron 开发经验的优先 熟悉Grunt、Gulp等一种以上的构建工具 熟悉RequireJS、SeaJS、Browserify等一种以上模块化方案 使用过Angular、Backbone或React等前端框架者优先 有HybridApp开发经验优先考虑； 对数据结构以及后台语言Java等有简单了解； 良好的编码习惯，较强的沟通、协调、理解能力和良好的责任心和团队合作能力有强烈的责任心和创新意识，业务逻辑理解与分析能力强。 有个人技术博客或者最近读到的可以推荐的书请在简历上写明，优先考虑。 前端开发实习生1.计算机相关专业大专以上学历，有电子商务网站开发经验者优先；2.熟练掌握Web前端技术,熟悉HTML、DIV，CSS、Ajax、JavaScript与Jquery, 能够手写符合W3C标准、兼容多种浏览器的前端页面代码,能写出或很快地修改好动态脚本；3.有一定的美术基础和网页界面设计经验4.了解PHP，熟悉seo代码优化，熟悉firefox，Google Chrome,IE6/7/8的特性和兼容性，写的代码简洁，能够兼容各浏览器的标准代码；5.熟练使用Firebug、HttpWatch等调试工具，熟悉jQuery等JS框架；6.能够熟练使用javascript等脚本语言，配合web后台工程师，完成产品前台页面的脚本编码工作；7.熟悉jQuery等主流的JS库，了解其运行机制；熟悉前端MVC架构8.熟悉新的HTML5表现形式的制作及开发, 有响应式页面开发经验优先；9.有Mobile Web的开发经验，能开发兼容移动版浏览器的应用，并且能实现各种交互效果。12.熟悉Python/Django优先；13.对CSS/Javascript性能优化、解决多浏览器兼容性问题有一定的经验；某公司任职要求：（1）熟悉JS、Html5、CSS在ES5和ES6下的相关编程；（2）熟悉Django或者SSH两者中的一种；（3）了解Bootstrap、react、echarts等常用web框架或库中的一种；（4）熟悉异步和局部刷新机制，如ajax下与后端的通讯交互通讯；（3）了解wsgi、会话等工作原理；（4）熟悉数据库的相关原理，具备一种或者几种常见数据库的相关开发经验，比如mysql、PostgreSQL、MongoDB、Cassandra、Redis等。（5）具备一定的网站相关开发环境使用部署经验；（6）具备良好的设计模式、代码工程规范、团队合作能力，对新技术或问题能独立学习，思考解决问题；加分项（具备以下其中一项就可以）：（1）熟悉web安全头编程；（2）了解web页面自适应挂平台的方法；（3）了解可信计算相关原理或具备相关开发经验；（4）具备大数据量实时查询与展示的开发经验；（5）与分布式与负载均衡后端进行配合开发的经验；百度：-本科或以上学历，计算机相关专业者优先-熟悉LAPM(linux+apache+php+mysql) 技术-熟悉主流的设计模式以及开发框架，熟悉Django、AngularJS框架优先-熟悉Linux平台，熟练掌握c++/python/js多语言者优先-熟悉数据可视化相关技术并有相关经验者优先-具有较强的分析和解决问题的能力，具备较强的问题和业务抽象能力-具备较强的学习能力和主动性，有良好的时间和流程、合作意识腾讯：1、有一定Web前端开发经验;2、掌握html/xhtml/css等网页制作技术，熟练掌握DIV+CSS网页布局，了解css3、html5；3、掌握JavaScript语言核心技术DOM、Ajax、JSON等，熟悉jQuery框架；4、熟悉浏览器兼容性解决方案，能够解决多浏览器版本兼容问题；5、有较丰富的网页制作经验，熟练使用Photoshop切图；6、学习力强，团队意识强，刻苦耐劳，热爱编程，主观能动性强；360：1.计算机或相关专业本科以上学历；2.要求有一定JS能力，思维逻辑性强；3.熟悉互联网、网页制作，最好熟悉DREAMWEAVER、PHOTOSHOP等基本网页制作、图片处理软件；4.人品端正，能适应高强度工作压力，工作细致耐心，踏实肯干，责任心强，具有良好的团队合作意识；5.至少保证一周工作4天；6.优秀实习生毕业后公司将会优先考虑正式录用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[轻松早起的秘密]]></title>
    <url>%2F2017%2F02%2F24%2F%E8%BD%BB%E6%9D%BE%E6%97%A9%E8%B5%B7%E7%9A%84%E7%A7%98%E5%AF%86%2F</url>
    <content type="text"><![CDATA[我是一个特别崇尚早睡早起的人，在大学这样屌丝群集的环境里，虽然我很难‘独善其身’，但是我还是能够做到相对的早起，从来不超过7点半。究其原因，我总结了以下方面： 一、做一个生活有规律的人这是对我自己来说最重要的一个原因。所谓的生活有规律并不是说刻板的每天重复同样的事，而是说至少有一些好的小习惯，比如：饮食规律、做笔记、各类运动、写日记……这些小的细节能够帮助你轻松快速地进行习惯转移，养成早起的习惯相对更加容易。 二、早起必须早睡（起源篇）充足的睡眠是早起的保障，你可以测定一下你的睡眠周期和睡眠时长。什么是睡眠周期？通常1.5个小时左右，但每个人都不一样，需要自己去测定。如果睡眠周期刚好结束，也就是1.5小时的整数倍，这时醒来精神会好很多，但是最基本的6~8个小时还是要保证的。早睡对于有些人来说已经孩童时代的记忆了。电灯和手机的发明让人们的作息习惯发生了极大的变化，仿佛已经融入基因。但是只要你想改变就能够脱离难以自拔的苦海。对于学生党来说你必须要排除一些干扰（手机、室友嘈杂声），我的建议是一躺在床上就关掉手机，刚开始极不习惯，但是用不了几天就能适应。至于嘈杂声你可以专门在淘宝上买一套耳塞，我自己亲身体验过，确实挺管用。除此之外，白天多运动也是有助于睡眠的，最终会让你拥有一个固定的生物钟，早起这件事就很容易水到渠成。 二、闹钟的终极使用方法（暴力篇）闹钟的发明无疑是早起者的福音，但有时却论为了一个提醒的工具，最终懒惰打败了自己，闹钟成了使我们醒来时悔恨的证明。如何发挥闹钟这个又爱又恨的伙伴的作用呢？我这里有几个建议：1.制造关闭闹钟的困难，关于如何制造，方法有很多。比如：把闹钟放到不容易拿到的地方，比如床上靠近脚的地方或者很高的柜子上面，这样你就必须起身甚至很费劲的才能把闹钟给关掉，而这时相信你已经无法再入睡了。2.调整闹钟铃声，很多人都喜欢吧闹钟定成柔和或自己喜欢的音乐，结果往往不理想。但是如果把铃声调成你特别讨厌的或比较奇葩的，可能效果就好好点。 三、找到志同道合之人 外出旅游有驴友团，而早起也有类似的军团，毕竟我们并不孤单。我个人就加入了一个微信早起团，群里的人来自五湖四海的各行各业，每天都有很多人打卡，每天总会有那么几个人比你起的更早，这也成了我早起和坚持打卡的动力。 四、做有意义的事如果早起了只是浑浑噩噩的过去了，那我觉得你肯定坚持不久。你必须寻找一些有意义的事，比如你可以通过运动让自己恢复精神、可以整理一天的计划、可以读读英语……这也是价值的源头所在。 五、感受早起带来的好处 自己找张纸，写下早起能给你带来的好处。比如：买早餐不用排队、不堵车、更多的时间去健身、工作环境人少无干扰、感觉自己每天都比别人多出一段时间，其实是仔细换算一下就会发现你变的长寿了。 想想这些我就激动的不行，哪还有理由不行动呢？这就是我早起的秘密，分享给你——我的朋友。 熟知并不是真知，“懂得很多道理却过不好一生”这句话在我看来只不过是一群笨蛋在形容另一群笨蛋而已，知行合一才是智者。]]></content>
  </entry>
  <entry>
    <title><![CDATA[普通人如何使用大数据]]></title>
    <url>%2F2017%2F02%2F13%2F%E6%99%AE%E9%80%9A%E4%BA%BA%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[随着互联网的快速发展我们进入了所谓的大数据时代，作为普通人都觉得那是遥不可及的高科技。可是事实上我们可以通过各种通道享受大数据服务，帮助我们做出合理的决策。 百度舆情：帮助广告主快速的了解产品口碑情况和消费者的购买决策主要包含以下功能： 1.行业/品牌热论商品榜：揭示行业内或同一品牌下，消费者评价最多的商品排行； 2.商品口碑趋势及情感份额：揭示商品在过去一年内的讨论量趋势及消费者态度占比； 3.消费者主要评价观点：摘取海量评论数据，凝练消费者对商品的各项评价观点及源评论 新浪微舆情：全网信息进行深度挖掘和多重分析新浪微舆情是中国最大的舆情服务平台,提供网页、微博、微信、电子报、视频等全媒体舆情监测方案,以及舆情事件分析、舆情简报制作,舆情日周月报自动发送、海外媒体监测… 百度指数：让每个人都成为数据科学家百度指数是以百度海量网民行为数据为基础的数据分享平台。在这里,你可以研究关键词搜索趋势、洞察网民兴趣和需求、监测舆情动向、定位受众特征。对个人而言，大到置业时机、报考学校、入职企业发展趋势，小到约会、旅游目的地选择，百度指数可以助其实现“智赢人生”；对于企业而言，竞品追踪、受众分析、传播效果，均以科学图标全景呈现，“智胜市场”变得轻松简单。 除此之外，类似的还有360指数……，更多分类可看这篇知乎帖子https://www.zhihu.com/question/27798279 大数据驱动每个人的发展，我们应该认识到大数据分析的价值，帮助我们更好的思考与选择。以上都是一些工具，对于个人来说，概率论和统计思维才重要的大数据技能。]]></content>
  </entry>
  <entry>
    <title><![CDATA[重新审视洗脑]]></title>
    <url>%2F2017%2F02%2F10%2F%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86%E6%B4%97%E8%84%91%2F</url>
    <content type="text"><![CDATA[提起洗脑我们首先想到的是传销和邪教，这两个让我们唾弃的组织。但是其实不仅仅是这些，还有广告、小说、政治……而最光明正大的是教育。细想我们一直生活着被洗脑的世界而不自知，但不要恐惧，不要被一个事物的负面吓倒，我们应该重新审视这个概念。洗脑是应该是一个中性词，因为被灌输的思想所带来的影响难以评定。 我们每天都洗手、洗澡，大脑也是一样的，不同的是手可以乱洗，大脑却不可以，代价实在太大。但是不洗肯定是不行的，我们需要洗掉我们自身的污浊以及别人带来的污染，这比洗手洗澡重要的多。 与其后知后觉的被社会洗脑，我更愿意自己洗或找特定的人洗，而这些做的结果是洁身自好，不再轻易掉进那些别人挖的污水坑。 洗脑要靠我们自己不断的学习，重新输入新的概念。当到了一个瓶颈期的时候，我们还是会想无头苍蝇一样到处乱撞。我认为与其糊涂一辈子不如找到正确价值观的人彻底清洗我们的大脑。我们不得不承认别人就是比我们牛，他们的价值观和方法论比我们高级的多，那正是我们所需要的。何况改造自己没什么可丢人的，我甘愿被优秀的人洗脑，我只是为了不让自己被环境给无染了而不自知。 我的洗脑方法1.读书2.向牛人学习3.写作4.独立正确的思考5.多一条认识世界的通道——English 我的洗脑体验1.颠覆了一些概念，仿佛重生2.感觉自己活得更精彩3.以前害怕的再也不畏惧4.最大的收获是走上了成长之路]]></content>
  </entry>
  <entry>
    <title><![CDATA[概念——维基百科]]></title>
    <url>%2F2017%2F02%2F07%2F%E6%A6%82%E5%BF%B5%E2%80%94%E2%80%94%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%2F</url>
    <content type="text"><![CDATA[概念是抽象的、普遍的想法，是充当指明实体、事件或关系的范畴或类的实体。在它们的外延中忽略事物的差异，如同它们是同一的去处理它们，所以概念是抽象的。它们等同的适用于在它们外延中的所有事物，所以它们是普遍的。概念也是命题的基本元素，如同词是句子的基本语义元素一样。 概念是意义的载体，而不是意义的主动者。一个单一的概念可以用任何数目的语言来表达；术语则是概念的表达形式。狗 的概念可以表达为德语的 Hund，法语的 chien 和西班牙语的 perro。概念在一定意义上独立于语言的事实使得翻译成为可能 - 在各种语言中词有同一的意义，因为它们表达了相同的概念。 概念是人类对一个复杂的过程或事物的理解。从哲学的观念来说概念是思维的基本单位。在日常用语中人们往往将概念与一个词或一个名词（术语）同等对待。 概念的范围和内容的定义在一些哲学理论中概念范围与概念内容的定义不同。 概念范围（外延）是指所有包括在这个概念中的事物，比如“白”的概念范围是所有白色的事物。范围相同的概念被称为是相当的，在逻辑研究中，尤其是在数学逻辑中相当的概念往往被看作是相同的。 在逻辑学中，一个概念的定义被看作是适当的，如果这个定义的用词描述的范围与概念范围相同。比如：正方形是四个边长都相等的长方形是一个适当的概念。 概念内容（内涵）包括所有一个组成该概念的事物的特性和关系。比如“饲养技术”的内容包括所有有关于这个技术的特性。但在定义这个概念时人们挑选出这些特性中最关键的，比如：“饲养技术是繁殖、喂养、圈养和使用农业用动物和以此提取有价值的产品的技术”。 任何一个概念之定义，都不可能完全概括概念本质特性和全部内容，只有从不同角度去分析研究此概念之本质特性和全部内容后，才能认识和把握概念。]]></content>
  </entry>
  <entry>
    <title><![CDATA[好物分享：护眼篇]]></title>
    <url>%2F2017%2F01%2F24%2F%E5%A5%BD%E7%89%A9%E5%88%86%E4%BA%AB%EF%BC%9A%E6%8A%A4%E7%9C%BC%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[经常在电脑和手机上看书的朋友，推荐一些科学护眼的软件：电脑工具软件：f.lux下载链接：https://justgetflux.com/安装及使用说明：https://www.zhihu.com/question/39535329/answer/101788984手机App：护眼宝/护眼宝精简版，可在各大应用平台下载安装。自己亲身使用，防蓝光效果非常好，发现自己真的离不开了。尤其是f.lux，是一款根据时间变化来改变屏幕色温的电脑软件，让你在深夜也能感受到太阳的温暖，顺便还有助于睡眠。我觉得工具的价值不在于功能多强大，而在于养成合理使用的好习惯。因为主角使我们，同样受益者也是我们。]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一次被打赏后的体验]]></title>
    <url>%2F2017%2F01%2F08%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%A2%AB%E6%89%93%E8%B5%8F%E5%90%8E%E7%9A%84%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[打开简书，发现一条未读消息，打开一看：“一位没有留下痕迹的读者向你的文章打赏了”。此时的我兴奋而好奇，然而却无法知道这个人的身份。无所谓金额大小，但对我来说，这不仅仅是一种鼓励和认可，更是一种意外的收获，让我有了继续创作的动力，让我觉得我做的事是有价值的。 其实我内心早就清楚，生活在信息浪潮下的人们，大部分没有形成知识价值体系。因为知识这东西太虚了，看不见，摸不着，买了还需要处理。不像淘宝购物，买过来就用了。 其实这完全是两类东西，知识不是一次性的商品，是终生的，知识不是一个完整的商品，它就好比一些普普通通的材料，不同人用它做出不同的东西。所以要想做出伟大的作品，首先材料的质量要保证，然后就是你的个人技艺了，这需要你不断的练习，才能化腐朽为神奇。 对我们来说，材料仿佛取之不尽，用之不竭，我们总能找到自己喜欢的材料，虽然好的材料确实收费，但是我们喜欢免费的，好像也舍不得用收费的，甚至有时候还抱怨好东西越来越少了。 殊不知一切来源于自己，我觉得其实本来只有两种选择： 1.使用质量好的且收费高的 2.不做伸手党，如果每个人都能给予创造者一点小的鼓励，那么整个开源环境将百花齐放，你获取优质内容的代价相对更小，找到自己喜欢的概率也会越大。 相信大部分人都更偏向于选择第二种，但现实中不是二选一，所以我们就变卦了。别人的慷慨不是你自私的理由，请每个人都尊重那些创造者们，我相信未来他们将会越来越好。]]></content>
  </entry>
  <entry>
    <title><![CDATA[聪明人的烦恼]]></title>
    <url>%2F2017%2F01%2F07%2F%E8%81%AA%E6%98%8E%E4%BA%BA%E7%9A%84%E7%83%A6%E6%81%BC%2F</url>
    <content type="text"><![CDATA[近日，Quora 社交网站（相当于国外的知乎）上一个题为“聪明有什么坏处？”（”When does intelligence become a curse?” ）的问题收到了 100 多个回复，其内容都说明了这一点。 很多智商超群的人参与了这个话题，他们分享了聪明带来的坏处，比如人们总是对他们有过高的期望，以及被误认为骄傲自大等很多方面的问题。下面，我们整理了智商超群者的 6 个弱点，并解释了隐藏在他们背后的科学原因。 1. 总是很理性而不是感性 Quora 网友马库斯·格杜尔德（Marcus Geduld）说他通常可以很好地了解自己的情感，并能够清楚地告诉别人——但从来没有真正因抒发情感而感到宽慰。 “这对于聪明人特别是那些善于表达的人来说是一个常见的问题。他们常用言语作为掩饰自己情感的烟幕，而且他们的言语对描述情感状态的描述越准确，就越难真正地抒发情感（所谓‘道理我都懂’）。不善言辞的人可能通过肉体的活动来表达情感，他们会大喊大叫，挥拳踢腿，狂奔尖叫，低声啜泣，手舞足蹈……而我属于善于表达那群人，所以我会选择用语言来表达。但是当我表达完情感以后，它们仍然卡在我的心头没有得到释放，我仅仅是在心里贴了一张表示这个情感的标签而已。” 格杜尔德的观点体现了认知能力（智商）和情感控制能力（情商）的差异。科学家并不能确切证明两种能力是否有关，如果有关又有什么样联系，但是一些有趣的研究显示高情商可以弥补智商的不足，至少在职场是这样。而换句话讲，你也可以认为高智商的人根本不需要依靠情商来解决问题。 2. 人们会习惯性地认为你干什么都出色 “不论在任何情况下，你都会被自动认为是最优秀的，”罗西纳·纳西尔（Roshna Nazir）在网站回复上写道，“你找不到任何人来倾诉你的软弱和不安。”更糟糕的是，你会每天惴惴不安，整天担心自己表现得不够优秀。 “这就使你畏手畏脚，因为惧怕失败而不敢冒任何风险。” 绍拉巴·梅塔（Saurabh Mehta）在网上这样回复道。 “今日心理学”网站上登过一篇节选自《聪明孩子，要聪明地培养》（Smart Parenting for Smart Kids）一书的文章，也说明了这个问题。作者在文章中写到：当孩子们非常聪明，在学校表现优异的时候，他们的家长反倒会对孩子未来的成就感到担忧。 不幸的是，“有些时候家长过分关注孩子的成就，而忽视了孩子的个性。” 3. 你可能无法体会努力的重要性 一些 Quora 网友提到：智商超群者会感觉自己用比常人更少的努力就可以应付大多数事情，但高智商并不总是会带来成功，而智商超群者可能永远培养不出成功所需的坚忍品质。 用 Quora 网友肯特·冯（Kent Fung）的话来说，“当有人早早地发现在生活中他们不需太多努力就可以使自己不落后的时候，聪明反而会成为他们未来发展的障碍，他们将永远培养不出坚韧的职业素养。” 一项研究表明责任心（如你工作的投入程度等）实际上是和智力水平呈负相关的，研究者表示，高智商的人可能会认为自己没必要那么努力来达成自己的目标。 4. 在日常谈话中你会不断地纠正他人的话，这可能会激怒他们 当你知道某人说的事情完全不对的时候，你会忍不住去纠正。但这种对正确事实的过分“坚持”可能会冒犯他人，导致他人的尴尬——甚至失去朋友。（译者忠告：过分较真会没有朋友的！） “智力超群”是一种糟糕的体验，拉希特·卡拉瑞迪（Raxit Karramreddy）说道，“每当你纠正他们错误之后，他们就会不跟你玩了，或者不跟你说话了。” 5. 你往往会想太多 在 Quora 的回答中，一个常见的主题是聪明人往往会陷入花太多时间考虑分析的困境（所谓沉迷思考，无法自拔）。 例如，如果你遇到每一个概念、经历每一件事情的时候都想弄清楚它的存在意义，你可能就会变得非常绝望伤感。“你会发现很多事情停滞不前、毫无生机，你会意识到一切都只不过意味着虚无。你不停地追寻生命的答案，但这却会让你非常抓狂。”阿卡什·拉德哈（Akash Ladha）在帖子中写道。 从实用的角度来看，“沉迷思考，无法自拔”可能会让高智商的人迟迟无法做出选择。特尔塞卡·查克拉博蒂（Tirthankar Chakraborty）在帖子中写到：“如果过度分析自己所做的每一个决定及其后果，你会发现你什么决定也做不了。” 6. 你越聪明，就越清楚自己还有很多东西不知道 智力超群往往意味着比别人更清楚自己认知的极限。即使你非常努力，你也不可能学会并理解所有世间事物。 马克·法克斯（Mike Farkas）写到：“高智商就像一个魔咒——你知道的越多，就会发现自己知道的越少。” 法克斯的观点与一个经典实验不谋而合，贾斯汀·克鲁格（Justin Kruger）和戴维·邓宁（David Dunning）1999 年发表的一项经典研究证明：你越不聪明，就越容易高估自己的认知能力——反之亦然。例如，有一个实验让学生做美国法学院入学考试（LSAT）改编题，结果发现分数最低的几个学生对自己答对题目的数量高估了大约 50%，而那些得分很高的学生却仅仅略微低估了自己答对题目的数量。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用手册]]></title>
    <url>%2F2017%2F01%2F07%2FHexo%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server open hey Hexo（一个hexo可视化文章管理的插件）12浏览器输入：http://localhost:4000/admin（登录进行文章管理）浏览器输入：http://localhost:4000（预览发布结果） Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment otherhexo-heyNext使用文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[菜鸟学英语连读发音]]></title>
    <url>%2F2017%2F01%2F05%2F%E8%8F%9C%E9%B8%9F%E5%AD%A6%E8%8B%B1%E8%AF%AD%E8%BF%9E%E8%AF%BB%E5%8F%91%E9%9F%B3%2F</url>
    <content type="text"><![CDATA[d+j 约等于 舅how did you like the movie?发音：How d 舅 like the movie?语速再快一点How (d也不要了) 舅 like the movie？ t+j 约等于 秋what you doing ? (明显病句，但是人家母语人士就是这样说的!,嘿嘿。)发音：wha 秋 doing? z+j 约等于 日药（快一点，短促 ）how was your day?发音：how wha 日药r day? s+j 约等于 修i promise you!发音：i promi 修 四级阅读小技巧：1.两逗号之间插入语可跳过2.破折号表示补充说明，容易出考题3.两个破折号中间为插入语，可跳过。4.引号：反讽题（阅读态度题）5.人的身份和地位不进行考查]]></content>
  </entry>
  <entry>
    <title><![CDATA[逃离时间的黑洞]]></title>
    <url>%2F2017%2F01%2F04%2F%E9%80%83%E7%A6%BB%E6%97%B6%E9%97%B4%E7%9A%84%E9%BB%91%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[一些时间的黑洞 超市时间黑洞 电视时间黑洞 网络时间黑洞这些黑洞的来源——大脑喜欢做简单的事 如何避免陷入时间黑洞 设置任务的最后期限 关掉QQ、社交平台 保持办公环境的整洁 给水杯倒满水 做一张任务清单 选一张好椅子 尽量隔离自己 要事第一 无法集中精力是放松一会你之所以完成任务的原因：1.习惯2.紧急且重要]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017年我的学习成长社群的建立]]></title>
    <url>%2F2017%2F01%2F03%2F2017%E5%B9%B4%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%88%90%E9%95%BF%E7%A4%BE%E7%BE%A4%E7%9A%84%E5%BB%BA%E7%AB%8B%2F</url>
    <content type="text"><![CDATA[一元复始，万象更新。2016已经过去，一切都已经归零。2017是个全新的开始，我们又有8760个小时可以用来追寻崭新的自己。2016年下半年我发生了难以置信的变化，就好像蝴蝶效应一样拦都拦不住，从此我深受其益。我们每天数不清多少次不停地点亮我们的手机，社交、微博、新闻……你仿佛害怕自己错过什么。仔细想想这样东西所带来的的价值，环境真的很重要，我都不想再说了。2017年我打算做点有价值的东西，找到一群进取型的人，通过各种各样的分享形式，共同打造一个你从来没有想过的成长社群，改变对于一个人来说很难，但是对于一群人有组织的人来说绝对不是问题。这是一个收费社群，所以如果你没有看到价值，这篇文章没必要往下看了。 关于这个社群，你应该知道： 1. 这是一个学习成长型的分享社群，这里有我们共同制定的规范。 2. 不要把这个群里理解为QQ群聊 3. 这个社群本质上是一个进取型人格的思想交流与分享平台。 4. 这里需要人与人之间的信任，你会第一次感觉到什么是未曾谋面的朋友。 5. 这里分享的也许不是最优质的东西，但是绝对是最适合你的，我们将共同发现更好的生活。 6. 如果你只是好奇，请千万慎重 7. 我们崇尚主动、分享、交流、进步，拒绝抱怨、索取。 8. 如果你只是想获取一些我们分享的资料，请止步，这里没有现成的东西给你，你必须参与和分享，不然你一定会失望的。我们拒绝伸手党，一味地索取只会让你陷入深渊。 9. 这是一个一辈子的成长社群，学生时我们可能分享讨论学习方法，工作时可以分享经验、为人父母后我们可以分享教育孩子的心得。 10. 这是一个多元化的社群，包括任何专业的知识我们都会分享、都会学习，好文章、好书、好电影、好音乐、好商品…我们极力推荐。我们是一群生活淘金者，从概率论的角度，我们发现矿藏的概率将呈现指数级的速度增长。 群现有规范：1. 每位成员都必须实名，备注格式：姓名+专业+学校 2. 群内禁止闲聊、斗图，禁止发布任何形式的广告（包括推销、寻物启事等） 3. 我们鼓励积极的话题讨论 4. 后续由全体成员投票制定，我们会不断完善。 对于违反群规范的成员：第一次警告，二次直接清除。 每周固定的一天，社群的会进行一次讨论分享，持续大约 1小时。每一位成员都可以分享，形式不限，分享者将会受到来自其他成员的红包打赏，如果你的分享对大家有价值，我们将毫不吝啬的为你打赏，金额绝对让你惊喜。 我们会不断邀请不同专业优秀的人参与进来，我们会在群内开展各种形式的活动，但这是未来的打算。 你可能最关心价格问题，而我认为这恰恰是最不重要的。首先你要明白一个你必须相信的道理：天下没有免费的午餐。一切的价值必须通过交换获得，免费的东西基本上充斥着垃圾，我们也往往不懂得珍惜，它消耗了我们最宝贵的东西——时间。所以要想获得价值，你必须要用金钱和时间去交换，至于到底值不值，全靠你自己衡量。 理论上你可以随时加入，反正这个群好像没有“终点” —— 因为既然开始了，就不会停下，反正会越来越好。 到底是机会还是坑你自己掂量，我只能说真正参与进来并行动的人绝对赚大了，这绝对是你最有价值的投资，同样这样这样的人绝对是我一辈子的战友。所以加入前请慎重考虑、慎重考虑、慎重考虑….因为加入之后，不再有退费的机会，被清除的成员也不再退费。 怎么加入？联系我就行！]]></content>
  </entry>
  <entry>
    <title><![CDATA[电影《驴得水》观后感]]></title>
    <url>%2F2017%2F01%2F03%2Funtitled-1520227519004%2F</url>
    <content type="text"><![CDATA[在微博中看到了豆瓣2016年各国电影排行，电影《驴得水》排行第一，忽然想起了自己云盘里一直收藏着，然后一口气看完了，这期间心中波澜起伏，影片中最后的那句话：我一直在心中回荡：过去的如果让它过去，以后只会越来越糟。影片一开始，一片古老自由安适的西北风光、几位怀揣教育理想的乡村老师，在一所只有几位学生的小学坚持教学。唯一的一位女老师哼唱的歌儿《我要你》听起来是那么的撩人心弦，但接着故事情节铺天盖地的展开，本来是一个小错误，只因人性的贪婪而变得愈加难以填补。本来个性鲜明的主人公却变成了自己以前最讨厌的人，知识分子在那个年代是多么的悲哀。 没有知识并不可怕，可怕的是自己贪婪的心。就好像工具是没有错的，关键在于掌握的人。不得不说那些为了私欲而获得的知识是多么的恐怖。“无奈”这是一个多么令人讨厌的词，无论怎样都永远不要变坏，变成当初自己最憎恶的那种人。 过去的如果让它过去，以后只会越来越糟。错了就承认并改正，不要一直错下去。]]></content>
  </entry>
  <entry>
    <title><![CDATA[87天前写下的成长教训]]></title>
    <url>%2F2017%2F01%2F02%2Funtitled-1520227392270%2F</url>
    <content type="text"><![CDATA[计划某天必须做某事时，不要相信闹钟这种东西，把它写进你每天的备忘录。 当你犹豫不决该不该做时，那就去马上去做，抓住机会。 信息数据是廉价的，但整理与分析的数据却相差甚远。 只有一个人的观念改变了，那么所谓的性格、人际关系、幸福感等等的一切都将改变。 从一开始，就要为最后做准备，可能工作量很大，但在这场马拉松中，你会愈挫愈勇，放浪形骸，最终奔腾入海，到时候你会觉得一切都是值得的。 当一种事务的重要性变得淡化时，其实并不见得真的不重要。 跟别人学，跟自己比。 那些我曾经知道的东西原来并不明白。]]></content>
  </entry>
  <entry>
    <title><![CDATA[2016成长记]]></title>
    <url>%2F2017%2F01%2F01%2F2016%E6%88%90%E9%95%BF%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一直想动手写，结果拖到现在。感叹的话我就不说了，因为2016年发生的事太多了。这一年我失去了很多，也收获了很多，这里我长话短说。 2016年，我大三了。高中同学全都已经毕业工作了，而我仍旧待在大学里学习，此时的我面临着就业的严峻压力，这是最难熬的一年，但同样也是我进步和成长最快的一段时间。 回想起来，大一大二的生活一两分钟就概括完了。当时的自己还一直都是一个懵懂、孤僻、自卑的少年，我一直都自知，从小学、初中、高中、大一、大二我都深受其害，悔恨当初大把大把的时间被吞噬掉，但总是难以逃脱人性的束缚。我一直陷入痛苦的努力和付出，结果却差强人意。人生最遗憾的不是失败，而是我本可以。 就这样两年过去了，不知道哪一天我清醒过来了，可以算的上是“一也白了少年头”，非常非常的明显的感觉到自己的成长。感慨自己当初真是个傻孩子，大好的光阴如此荒废了。这一觉睡得太久，一醒来七年已经过去，早已物是人非。有的东西一旦错过，真的很难挽回和弥补，我深知这个道理。但是这绝对不是借口，这只是一个开头而已。认知的改变正在逐步让我成长起来，我需要慢慢磨合，把道理深入骨子里，真正地践行。 2016年6月30日,之前断断续续的日记记录从这天又开始了，然后就停不下来了。刚开始写在纸上，后来就直接在电脑上的txt文档里面写了，然后就习惯了这种方式，一直写。 这一年没有看多少书，去图书馆借了很多，自己买了三四本，基本上都没有完整仔细的读完，最值骄傲的居然是认真看过了新概念三的全部文章，看过之后虽然没有掌握什么知识，但是我知道这真的对我的英语有着潜移默化的提升，2017年我决定还要再看一遍。真的仔细想想学了十来年的英语，却始终不会用，这岂不是极大的悲哀。我真真切切的感受到英语对我未来的价值所在，所以不管四级六级存不存在，我终归要学，而且真正的用起来，去体验所带来的的自由。 2016年我开始讨厌QQ，喜欢上了微信，这是一个关键性的选择，后来发生的事，其实基本上全都是由此而来。 2016年遇到了一辈子的好朋友，我们互相鼓励，互相帮助，虽然没有形影不离，但是感情依旧，我永远都不会忘记。 2016年第一次坐上火车，感觉很奇妙；第一次坐地铁，出来时却不让我通过。原来是把地铁卡投回去的，结果我却傻傻地一直刷，每次想起来我都笑的不行。 2016年第一次进入公司实习，体验了小员工的生活，似乎也看到了未来自己的样子。 2016还是有点年少无知，做了很多傻事，说了很多不该说的话，但是没有后悔，因为人生就这一次，不想憋屈自己。 2016年自认为好学的我真正改变对学习的观念，学习是一辈子的事，活到老，学到老这句话绝对不是危言耸听，只有终身学习才能适应这个时代。 2016年大三的我居然加入了CSDN社团，成为会长，这不得不让我感叹命运变化之无常。和大一的学弟学妹们相处一段时间才发现，自己当初也是和他们一样的，甚至还不如他们。 我很想帮他们夺回那些因迷茫和无知而消逝的时间，可是路终归要自己走，且要一步一个脚印的走。每当别人称自己为大神的时候，我就觉得可笑，我根本不是什么大神，别人不知道，我自己还不清楚吗？我只是再普通不过的一个人罢了。这绝对是认知偏差，任何人之间的差* 来源于此，我很想证明一个问题，我这样人的人都可以，为什么你们不可以。 2016年掉了几次坑，可笑的是别人已经告诉我那是一个坑，我也相信了，可是我还是傻傻的跳了，然后就笃信一辈子，那个坑就再也没有存在过。我一直不明白：为什么知道如此多的道理，还是过不好一生。后来我觉得原因就是我们心底里始终不相信，没有看到其所带来的巨大的影响和价值，然后那些道理就像谚语一样被我们信口拈来，却永远不知其所以然，始终只是知道而不能用到，没有比这更悲哀的事了。 2016年知识经济真正开始了，我一直都很赞同，自己也亲身经历和感受到了这种服务，不得不说这绝对是一个巨大的进步。互联网确实经历了资本寒冬，创造互联网的时代已经过去，真正会用互联网的人开始积聚爆发，知识变现的浪潮已经涌来，我的内心是无比的激动，终于找到了自己一直向往和追寻的目标。 距离2017年还有一周时间，回顾2016年，对于我来说这真的是人生的一次巨大转折，同时也是一次弯道超越。这篇总结也是我这么久以来第一次主动去写的千字文章，以后也会陆陆续续地写下去，因为我打心底里喜欢。]]></content>
  </entry>
</search>
